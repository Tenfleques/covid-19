{"version":3,"sources":["helpers/diffpatch.js","_locale/index.js","utilities/agent.js","utilities/text.js","utilities/date.js","utilities/index.js","HOCS/AnimateLoad.js","Components/Charts/barchart.js","Components/card/info.js","Components/card/map.js","Pages/index.js","Components/card/contacts.js","Components/navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","op","text","prototype","length","toString","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","data","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","AgentUtils","getAgentLocale","localStorage","getItem","navigator","language","userLanguage","slice","TextUtilities","encode","currentChar","dictionary","out","phrase","code","codePointAt","map","fromCodePoint","error","processUpdate","txt_patch","old_txt","includes","console","log","patch_from_text","decode","dataAsText","oldPhrase","currentCode","similarity","s1","s2","longer","shorter","longerLength","toLowerCase","costs","lastValue","newValue","editDistance","parseFloat","hashCode","str","hash","getLocalCaption","key","user_lang","Locale","title","en_dates","en_months","TextUtils","DateUtils","getLocalDate","datex","date","getDay","getMonth","getDate","getFullYear","AnimateLoad","WrappedComponent","state","didMount","setTimeout","setState","className","props","React","Component","BarChar","cases","update","EventSource","API","baseURL","updates","addEventListener","processCases","exclude","p","JSON","parse","setItem","raw_data","Object","keys","filter","k","caption","style","height","series","type","axes","primary","position","rotation","stacked","tooltip","InfoCard","children","ZimbabweMapCard","baseProfile","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","version","viewBox","xmlns","id","name","cx","cy","Home","text_data","online","aggr_data","events","onerror","close","last_update","Utils","icons","icon","faWhatsapp","color","faTwitter","faFacebook","ContactsCard","obj_keys","Contacts","contacts","href","formatContacts","NavBar","width","src","alt","App","navs","SectionLinks","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.035df2a6.chunk.js","sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n    // Defaults.\n    // Redefine these in your program to override the defaults.\n  \n    // Number of seconds to map a diff before giving up (0 for infinity).\n    this.Diff_Timeout = 1.0;\n    // Cost of an empty edit operation in terms of edit characters.\n    this.Diff_EditCost = 4;\n    // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n    this.Match_Threshold = 0.5;\n    // How far to search for a match (0 = exact location, 1000+ = broad match).\n    // A match this many characters away from the expected location will add\n    // 1.0 to the score (0.0 is a perfect match).\n    this.Match_Distance = 1000;\n    // When deleting a large block of text (over ~64 characters), how close do\n    // the contents have to be to match the expected contents. (0.0 = perfection,\n    // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n    // end points of a delete need to match.\n    this.Patch_DeleteThreshold = 0.5;\n    // Chunk size for context length.\n    this.Patch_Margin = 4;\n  \n    // The number of bits in an int.\n    this.Match_MaxBits = 32;\n  };\n  \n  \n  //  DIFF FUNCTIONS\n  \n  \n  /**\n   * The data structure representing a diff is an array of tuples:\n   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n   */\n  var DIFF_DELETE = -1;\n  var DIFF_INSERT = 1;\n  var DIFF_EQUAL = 0;\n  \n  /**\n   * Class representing one diff tuple.\n   * Attempts to look like a two-element array (which is what this used to be).\n   * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n   * @param {string} text Text to be deleted, inserted, or retained.\n   * @constructor\n   */\n  diff_match_patch.Diff = function(op, text) {\n    this[0] = op;\n    this[1] = text;\n  };\n  \n  diff_match_patch.Diff.prototype.length = 2;\n  \n  /**\n   * Emulate the output of a two-element array.\n   * @return {string} Diff operation as a string.\n   */\n  diff_match_patch.Diff.prototype.toString = function() {\n    return this[0] + ',' + this[1];\n  };\n  \n  \n  /**\n   * Find the differences between two texts.  Simplifies the problem by stripping\n   * any common prefix or suffix off the texts before diffing.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n   *     then don't run a line-level diff first to identify the changed areas.\n   *     Defaults to true, which does a faster, slightly less optimal diff.\n   * @param {number=} opt_deadline Optional time when the diff should be complete\n   *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n   *     instead.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n      opt_deadline) {\n    // Set a deadline by which time the diff must be complete.\n    if (typeof opt_deadline == 'undefined') {\n      if (this.Diff_Timeout <= 0) {\n        opt_deadline = Number.MAX_VALUE;\n      } else {\n        opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n      }\n    }\n    var deadline = opt_deadline;\n  \n    // Check for null inputs.\n    if (text1 == null || text2 == null) {\n      throw new Error('Null input. (diff_main)');\n    }\n  \n    // Check for equality (speedup).\n    if (text1 == text2) {\n      if (text1) {\n        return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n      }\n      return [];\n    }\n  \n    if (typeof opt_checklines == 'undefined') {\n      opt_checklines = true;\n    }\n    var checklines = opt_checklines;\n  \n    // Trim off common prefix (speedup).\n    var commonlength = this.diff_commonPrefix(text1, text2);\n    var commonprefix = text1.substring(0, commonlength);\n    text1 = text1.substring(commonlength);\n    text2 = text2.substring(commonlength);\n  \n    // Trim off common suffix (speedup).\n    commonlength = this.diff_commonSuffix(text1, text2);\n    var commonsuffix = text1.substring(text1.length - commonlength);\n    text1 = text1.substring(0, text1.length - commonlength);\n    text2 = text2.substring(0, text2.length - commonlength);\n  \n    // Compute the diff on the middle block.\n    var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n  \n    // Restore the prefix and suffix.\n    if (commonprefix) {\n      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n    }\n    if (commonsuffix) {\n      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n    }\n    this.diff_cleanupMerge(diffs);\n    return diffs;\n  };\n  \n  \n  /**\n   * Find the differences between two texts.  Assumes that the texts do not\n   * have any common prefix or suffix.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {boolean} checklines Speedup flag.  If false, then don't run a\n   *     line-level diff first to identify the changed areas.\n   *     If true, then run a faster, slightly less optimal diff.\n   * @param {number} deadline Time when the diff should be complete by.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n      deadline) {\n    var diffs;\n  \n    if (!text1) {\n      // Just add some text (speedup).\n      return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n    }\n  \n    if (!text2) {\n      // Just delete some text (speedup).\n      return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n    }\n  \n    var longtext = text1.length > text2.length ? text1 : text2;\n    var shorttext = text1.length > text2.length ? text2 : text1;\n    var i = longtext.indexOf(shorttext);\n    if (i != -1) {\n      // Shorter text is inside the longer text (speedup).\n      diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n               new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n               new diff_match_patch.Diff(DIFF_INSERT,\n                   longtext.substring(i + shorttext.length))];\n      // Swap insertions for deletions if diff is reversed.\n      if (text1.length > text2.length) {\n        diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n      }\n      return diffs;\n    }\n  \n    if (shorttext.length == 1) {\n      // Single character string.\n      // After the previous speedup, the character can't be an equality.\n      return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n              new diff_match_patch.Diff(DIFF_INSERT, text2)];\n    }\n  \n    // Check to see if the problem can be split in two.\n    var hm = this.diff_halfMatch_(text1, text2);\n    if (hm) {\n      // A half-match was found, sort out the return data.\n      var text1_a = hm[0];\n      var text1_b = hm[1];\n      var text2_a = hm[2];\n      var text2_b = hm[3];\n      var mid_common = hm[4];\n      // Send both pairs off for separate processing.\n      var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n      var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n      // Merge the results.\n      return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                            diffs_b);\n    }\n  \n    if (checklines && text1.length > 100 && text2.length > 100) {\n      return this.diff_lineMode_(text1, text2, deadline);\n    }\n  \n    return this.diff_bisect_(text1, text2, deadline);\n  };\n  \n  \n  /**\n   * Do a quick line-level diff on both strings, then rediff the parts for\n   * greater accuracy.\n   * This speedup can produce non-minimal diffs.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {number} deadline Time when the diff should be complete by.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n    // Scan the text on a line-by-line basis first.\n    var a = this.diff_linesToChars_(text1, text2);\n    text1 = a.chars1;\n    text2 = a.chars2;\n    var linearray = a.lineArray;\n  \n    var diffs = this.diff_main(text1, text2, false, deadline);\n  \n    // Convert the diff back to original text.\n    this.diff_charsToLines_(diffs, linearray);\n    // Eliminate freak matches (e.g. blank lines)\n    this.diff_cleanupSemantic(diffs);\n  \n    // Rediff any replacement blocks, this time character-by-character.\n    // Add a dummy entry at the end.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n    var pointer = 0;\n    var count_delete = 0;\n    var count_insert = 0;\n    var text_delete = '';\n    var text_insert = '';\n    while (pointer < diffs.length) {\n      switch (diffs[pointer][0]) {\n        case DIFF_INSERT:\n          count_insert++;\n          text_insert += diffs[pointer][1];\n          break;\n        case DIFF_DELETE:\n          count_delete++;\n          text_delete += diffs[pointer][1];\n          break;\n        case DIFF_EQUAL:\n          // Upon reaching an equality, check for prior redundancies.\n          if (count_delete >= 1 && count_insert >= 1) {\n            // Delete the offending records and add the merged ones.\n            diffs.splice(pointer - count_delete - count_insert,\n                         count_delete + count_insert);\n            pointer = pointer - count_delete - count_insert;\n            var subDiff =\n                this.diff_main(text_delete, text_insert, false, deadline);\n            for (var j = subDiff.length - 1; j >= 0; j--) {\n              diffs.splice(pointer, 0, subDiff[j]);\n            }\n            pointer = pointer + subDiff.length;\n          }\n          count_insert = 0;\n          count_delete = 0;\n          text_delete = '';\n          text_insert = '';\n          break;\n      }\n      pointer++;\n    }\n    diffs.pop();  // Remove the dummy entry at the end.\n  \n    return diffs;\n  };\n  \n  \n  /**\n   * Find the 'middle snake' of a diff, split the problem in two\n   * and return the recursively constructed diff.\n   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {number} deadline Time at which to bail if not yet complete.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n    // Cache the text lengths to prevent multiple calls.\n    var text1_length = text1.length;\n    var text2_length = text2.length;\n    var max_d = Math.ceil((text1_length + text2_length) / 2);\n    var v_offset = max_d;\n    var v_length = 2 * max_d;\n    var v1 = new Array(v_length);\n    var v2 = new Array(v_length);\n    // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n    // integers and undefined.\n    for (var x = 0; x < v_length; x++) {\n      v1[x] = -1;\n      v2[x] = -1;\n    }\n    v1[v_offset + 1] = 0;\n    v2[v_offset + 1] = 0;\n    var delta = text1_length - text2_length;\n    // If the total number of characters is odd, then the front path will collide\n    // with the reverse path.\n    var front = (delta % 2 != 0);\n    // Offsets for start and end of k loop.\n    // Prevents mapping of space beyond the grid.\n    var k1start = 0;\n    var k1end = 0;\n    var k2start = 0;\n    var k2end = 0;\n    for (var d = 0; d < max_d; d++) {\n      // Bail out if deadline is reached.\n      if ((new Date()).getTime() > deadline) {\n        break;\n      }\n  \n      // Walk the front path one step.\n      for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n        var k1_offset = v_offset + k1;\n        var x1;\n        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n          x1 = v1[k1_offset + 1];\n        } else {\n          x1 = v1[k1_offset - 1] + 1;\n        }\n        var y1 = x1 - k1;\n        while (x1 < text1_length && y1 < text2_length &&\n               text1.charAt(x1) == text2.charAt(y1)) {\n          x1++;\n          y1++;\n        }\n        v1[k1_offset] = x1;\n        if (x1 > text1_length) {\n          // Ran off the right of the graph.\n          k1end += 2;\n        } else if (y1 > text2_length) {\n          // Ran off the bottom of the graph.\n          k1start += 2;\n        } else if (front) {\n          var k2_offset = v_offset + delta - k1;\n          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n            // Mirror x2 onto top-left coordinate system.\n            var x2 = text1_length - v2[k2_offset];\n            if (x1 >= x2) {\n              // Overlap detected.\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n  \n      // Walk the reverse path one step.\n      for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n        var k2_offset = v_offset + k2;\n        var x2;\n        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n          x2 = v2[k2_offset + 1];\n        } else {\n          x2 = v2[k2_offset - 1] + 1;\n        }\n        var y2 = x2 - k2;\n        while (x2 < text1_length && y2 < text2_length &&\n               text1.charAt(text1_length - x2 - 1) ==\n               text2.charAt(text2_length - y2 - 1)) {\n          x2++;\n          y2++;\n        }\n        v2[k2_offset] = x2;\n        if (x2 > text1_length) {\n          // Ran off the left of the graph.\n          k2end += 2;\n        } else if (y2 > text2_length) {\n          // Ran off the top of the graph.\n          k2start += 2;\n        } else if (!front) {\n          var k1_offset = v_offset + delta - k2;\n          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n            var x1 = v1[k1_offset];\n            var y1 = v_offset + x1 - k1_offset;\n            // Mirror x2 onto top-left coordinate system.\n            x2 = text1_length - x2;\n            if (x1 >= x2) {\n              // Overlap detected.\n              return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n    }\n    // Diff took too long and hit the deadline or\n    // number of diffs equals number of characters, no commonality at all.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  };\n  \n  \n  /**\n   * Given the location of the 'middle snake', split the diff in two parts\n   * and recurse.\n   * @param {string} text1 Old string to be diffed.\n   * @param {string} text2 New string to be diffed.\n   * @param {number} x Index of split point in text1.\n   * @param {number} y Index of split point in text2.\n   * @param {number} deadline Time at which to bail if not yet complete.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @private\n   */\n  diff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n      deadline) {\n    var text1a = text1.substring(0, x);\n    var text2a = text2.substring(0, y);\n    var text1b = text1.substring(x);\n    var text2b = text2.substring(y);\n  \n    // Compute both diffs serially.\n    var diffs = this.diff_main(text1a, text2a, false, deadline);\n    var diffsb = this.diff_main(text1b, text2b, false, deadline);\n  \n    return diffs.concat(diffsb);\n  };\n  \n  \n  /**\n   * Split two texts into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n   *     An object containing the encoded text1, the encoded text2 and\n   *     the array of unique strings.\n   *     The zeroth element of the array of unique strings is intentionally blank.\n   * @private\n   */\n  diff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n    var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n    var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n  \n    // '\\x00' is a valid character, but various debuggers don't like it.\n    // So we'll insert a junk entry to avoid generating a null character.\n    lineArray[0] = '';\n  \n    /**\n     * Split a text into an array of strings.  Reduce the texts to a string of\n     * hashes where each Unicode character represents one line.\n     * Modifies linearray and linehash through being a closure.\n     * @param {string} text String to encode.\n     * @return {string} Encoded string.\n     * @private\n     */\n    function diff_linesToCharsMunge_(text) {\n      var chars = '';\n      // Walk the text, pulling out a substring for each line.\n      // text.split('\\n') would would temporarily double our memory footprint.\n      // Modifying text would create many large strings to garbage collect.\n      var lineStart = 0;\n      var lineEnd = -1;\n      // Keeping our own length variable is faster than looking it up.\n      var lineArrayLength = lineArray.length;\n      while (lineEnd < text.length - 1) {\n        lineEnd = text.indexOf('\\n', lineStart);\n        if (lineEnd == -1) {\n          lineEnd = text.length - 1;\n        }\n        var line = text.substring(lineStart, lineEnd + 1);\n  \n        if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n            (lineHash[line] !== undefined)) {\n          chars += String.fromCharCode(lineHash[line]);\n        } else {\n          if (lineArrayLength == maxLines) {\n            // Bail out at 65535 because\n            // String.fromCharCode(65536) == String.fromCharCode(0)\n            line = text.substring(lineStart);\n            lineEnd = text.length;\n          }\n          chars += String.fromCharCode(lineArrayLength);\n          lineHash[line] = lineArrayLength;\n          lineArray[lineArrayLength++] = line;\n        }\n        lineStart = lineEnd + 1;\n      }\n      return chars;\n    }\n    // Allocate 2/3rds of the space for text1, the rest for text2.\n    var maxLines = 40000;\n    var chars1 = diff_linesToCharsMunge_(text1);\n    maxLines = 65535;\n    var chars2 = diff_linesToCharsMunge_(text2);\n    return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n  };\n  \n  \n  /**\n   * Rehydrate the text in a diff from a string of line hashes to real lines of\n   * text.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @param {!Array.<string>} lineArray Array of unique strings.\n   * @private\n   */\n  diff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n    for (var i = 0; i < diffs.length; i++) {\n      var chars = diffs[i][1];\n      var text = [];\n      for (var j = 0; j < chars.length; j++) {\n        text[j] = lineArray[chars.charCodeAt(j)];\n      }\n      diffs[i][1] = text.join('');\n    }\n  };\n  \n  \n  /**\n   * Determine the common prefix of two strings.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {number} The number of characters common to the start of each\n   *     string.\n   */\n  diff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n    // Quick check for common null cases.\n    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n      return 0;\n    }\n    // Binary search.\n    // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n    var pointermin = 0;\n    var pointermax = Math.min(text1.length, text2.length);\n    var pointermid = pointermax;\n    var pointerstart = 0;\n    while (pointermin < pointermid) {\n      if (text1.substring(pointerstart, pointermid) ==\n          text2.substring(pointerstart, pointermid)) {\n        pointermin = pointermid;\n        pointerstart = pointermin;\n      } else {\n        pointermax = pointermid;\n      }\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n    }\n    return pointermid;\n  };\n  \n  \n  /**\n   * Determine the common suffix of two strings.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {number} The number of characters common to the end of each string.\n   */\n  diff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n    // Quick check for common null cases.\n    if (!text1 || !text2 ||\n        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n      return 0;\n    }\n    // Binary search.\n    // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n    var pointermin = 0;\n    var pointermax = Math.min(text1.length, text2.length);\n    var pointermid = pointermax;\n    var pointerend = 0;\n    while (pointermin < pointermid) {\n      if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n          text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n        pointermin = pointermid;\n        pointerend = pointermin;\n      } else {\n        pointermax = pointermid;\n      }\n      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n    }\n    return pointermid;\n  };\n  \n  \n  /**\n   * Determine if the suffix of one string is the prefix of another.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {number} The number of characters common to the end of the first\n   *     string and the start of the second string.\n   * @private\n   */\n  diff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n    // Cache the text lengths to prevent multiple calls.\n    var text1_length = text1.length;\n    var text2_length = text2.length;\n    // Eliminate the null case.\n    if (text1_length == 0 || text2_length == 0) {\n      return 0;\n    }\n    // Truncate the longer string.\n    if (text1_length > text2_length) {\n      text1 = text1.substring(text1_length - text2_length);\n    } else if (text1_length < text2_length) {\n      text2 = text2.substring(0, text1_length);\n    }\n    var text_length = Math.min(text1_length, text2_length);\n    // Quick check for the worst case.\n    if (text1 == text2) {\n      return text_length;\n    }\n  \n    // Start by looking for a single character match\n    // and increase length until no match is found.\n    // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n    var best = 0;\n    var length = 1;\n    while (true) {\n      var pattern = text1.substring(text_length - length);\n      var found = text2.indexOf(pattern);\n      if (found == -1) {\n        return best;\n      }\n      length += found;\n      if (found == 0 || text1.substring(text_length - length) ==\n          text2.substring(0, length)) {\n        best = length;\n        length++;\n      }\n    }\n  };\n  \n  \n  /**\n   * Do the two texts share a substring which is at least half the length of the\n   * longer text?\n   * This speedup can produce non-minimal diffs.\n   * @param {string} text1 First string.\n   * @param {string} text2 Second string.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     text1, the suffix of text1, the prefix of text2, the suffix of\n   *     text2 and the common middle.  Or null if there was no match.\n   * @private\n   */\n  diff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n    if (this.Diff_Timeout <= 0) {\n      // Don't risk returning a non-optimal diff if we have unlimited time.\n      return null;\n    }\n    var longtext = text1.length > text2.length ? text1 : text2;\n    var shorttext = text1.length > text2.length ? text2 : text1;\n    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n      return null;  // Pointless.\n    }\n    var dmp = this;  // 'this' becomes 'window' in a closure.\n  \n    /**\n     * Does a substring of shorttext exist within longtext such that the substring\n     * is at least half the length of longtext?\n     * Closure, but does not reference any external variables.\n     * @param {string} longtext Longer string.\n     * @param {string} shorttext Shorter string.\n     * @param {number} i Start index of quarter length substring within longtext.\n     * @return {Array.<string>} Five element Array, containing the prefix of\n     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n     *     of shorttext and the common middle.  Or null if there was no match.\n     * @private\n     */\n    function diff_halfMatchI_(longtext, shorttext, i) {\n      // Start with a 1/4 length substring at position i as a seed.\n      var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n      var j = -1;\n      var best_common = '';\n      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n      while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n        var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                                 shorttext.substring(j));\n        var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                                 shorttext.substring(0, j));\n        if (best_common.length < suffixLength + prefixLength) {\n          best_common = shorttext.substring(j - suffixLength, j) +\n              shorttext.substring(j, j + prefixLength);\n          best_longtext_a = longtext.substring(0, i - suffixLength);\n          best_longtext_b = longtext.substring(i + prefixLength);\n          best_shorttext_a = shorttext.substring(0, j - suffixLength);\n          best_shorttext_b = shorttext.substring(j + prefixLength);\n        }\n      }\n      if (best_common.length * 2 >= longtext.length) {\n        return [best_longtext_a, best_longtext_b,\n                best_shorttext_a, best_shorttext_b, best_common];\n      } else {\n        return null;\n      }\n    }\n  \n    // First check if the second quarter is the seed for a half-match.\n    var hm1 = diff_halfMatchI_(longtext, shorttext,\n                               Math.ceil(longtext.length / 4));\n    // Check again based on the third quarter.\n    var hm2 = diff_halfMatchI_(longtext, shorttext,\n                               Math.ceil(longtext.length / 2));\n    var hm;\n    if (!hm1 && !hm2) {\n      return null;\n    } else if (!hm2) {\n      hm = hm1;\n    } else if (!hm1) {\n      hm = hm2;\n    } else {\n      // Both matched.  Select the longest.\n      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n    }\n  \n    // A half-match was found, sort out the return data.\n    var text1_a, text1_b, text2_a, text2_b;\n    if (text1.length > text2.length) {\n      text1_a = hm[0];\n      text1_b = hm[1];\n      text2_a = hm[2];\n      text2_b = hm[3];\n    } else {\n      text2_a = hm[0];\n      text2_b = hm[1];\n      text1_a = hm[2];\n      text1_b = hm[3];\n    }\n    var mid_common = hm[4];\n    return [text1_a, text1_b, text2_a, text2_b, mid_common];\n  };\n  \n  \n  /**\n   * Reduce the number of edits by eliminating semantically trivial equalities.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n    var changes = false;\n    var equalities = [];  // Stack of indices where equalities are found.\n    var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n    /** @type {?string} */\n    var lastEquality = null;\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n    var pointer = 0;  // Index of current position.\n    // Number of characters that changed prior to the equality.\n    var length_insertions1 = 0;\n    var length_deletions1 = 0;\n    // Number of characters that changed after the equality.\n    var length_insertions2 = 0;\n    var length_deletions2 = 0;\n    while (pointer < diffs.length) {\n      if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n        equalities[equalitiesLength++] = pointer;\n        length_insertions1 = length_insertions2;\n        length_deletions1 = length_deletions2;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = diffs[pointer][1];\n      } else {  // An insertion or deletion.\n        if (diffs[pointer][0] == DIFF_INSERT) {\n          length_insertions2 += diffs[pointer][1].length;\n        } else {\n          length_deletions2 += diffs[pointer][1].length;\n        }\n        // Eliminate an equality that is smaller or equal to the edits on both\n        // sides of it.\n        if (lastEquality && (lastEquality.length <=\n            Math.max(length_insertions1, length_deletions1)) &&\n            (lastEquality.length <= Math.max(length_insertions2,\n                                             length_deletions2))) {\n          // Duplicate record.\n          diffs.splice(equalities[equalitiesLength - 1], 0,\n                       new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n          // Change second copy to insert.\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n          // Throw away the equality we just deleted.\n          equalitiesLength--;\n          // Throw away the previous equality (it needs to be reevaluated).\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          length_insertions1 = 0;  // Reset the counters.\n          length_deletions1 = 0;\n          length_insertions2 = 0;\n          length_deletions2 = 0;\n          lastEquality = null;\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n  \n    // Normalize the diff.\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n    this.diff_cleanupSemanticLossless(diffs);\n  \n    // Find any overlaps between deletions and insertions.\n    // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n    //   -> <del>abc</del>xxx<ins>def</ins>\n    // e.g: <del>xxxabc</del><ins>defxxx</ins>\n    //   -> <ins>def</ins>xxx<del>abc</del>\n    // Only extract an overlap if it is as big as the edit ahead or behind it.\n    pointer = 1;\n    while (pointer < diffs.length) {\n      if (diffs[pointer - 1][0] == DIFF_DELETE &&\n          diffs[pointer][0] == DIFF_INSERT) {\n        var deletion = diffs[pointer - 1][1];\n        var insertion = diffs[pointer][1];\n        var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n        var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n        if (overlap_length1 >= overlap_length2) {\n          if (overlap_length1 >= deletion.length / 2 ||\n              overlap_length1 >= insertion.length / 2) {\n            // Overlap found.  Insert an equality and trim the surrounding edits.\n            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                insertion.substring(0, overlap_length1)));\n            diffs[pointer - 1][1] =\n                deletion.substring(0, deletion.length - overlap_length1);\n            diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n            pointer++;\n          }\n        } else {\n          if (overlap_length2 >= deletion.length / 2 ||\n              overlap_length2 >= insertion.length / 2) {\n            // Reverse overlap found.\n            // Insert an equality and swap and trim the surrounding edits.\n            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                deletion.substring(0, overlap_length2)));\n            diffs[pointer - 1][0] = DIFF_INSERT;\n            diffs[pointer - 1][1] =\n                insertion.substring(0, insertion.length - overlap_length2);\n            diffs[pointer + 1][0] = DIFF_DELETE;\n            diffs[pointer + 1][1] =\n                deletion.substring(overlap_length2);\n            pointer++;\n          }\n        }\n        pointer++;\n      }\n      pointer++;\n    }\n  };\n  \n  \n  /**\n   * Look for single edits surrounded on both sides by equalities\n   * which can be shifted sideways to align the edit to a word boundary.\n   * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n    /**\n     * Given two strings, compute a score representing whether the internal\n     * boundary falls on logical boundaries.\n     * Scores range from 6 (best) to 0 (worst).\n     * Closure, but does not reference any external variables.\n     * @param {string} one First string.\n     * @param {string} two Second string.\n     * @return {number} The score.\n     * @private\n     */\n    function diff_cleanupSemanticScore_(one, two) {\n      if (!one || !two) {\n        // Edges are the best.\n        return 6;\n      }\n  \n      // Each port of this function behaves slightly differently due to\n      // subtle differences in each language's definition of things like\n      // 'whitespace'.  Since this function's purpose is largely cosmetic,\n      // the choice has been made to use each language's native features\n      // rather than force total conformity.\n      var char1 = one.charAt(one.length - 1);\n      var char2 = two.charAt(0);\n      var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n      var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n      var whitespace1 = nonAlphaNumeric1 &&\n          char1.match(diff_match_patch.whitespaceRegex_);\n      var whitespace2 = nonAlphaNumeric2 &&\n          char2.match(diff_match_patch.whitespaceRegex_);\n      var lineBreak1 = whitespace1 &&\n          char1.match(diff_match_patch.linebreakRegex_);\n      var lineBreak2 = whitespace2 &&\n          char2.match(diff_match_patch.linebreakRegex_);\n      var blankLine1 = lineBreak1 &&\n          one.match(diff_match_patch.blanklineEndRegex_);\n      var blankLine2 = lineBreak2 &&\n          two.match(diff_match_patch.blanklineStartRegex_);\n  \n      if (blankLine1 || blankLine2) {\n        // Five points for blank lines.\n        return 5;\n      } else if (lineBreak1 || lineBreak2) {\n        // Four points for line breaks.\n        return 4;\n      } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n        // Three points for end of sentences.\n        return 3;\n      } else if (whitespace1 || whitespace2) {\n        // Two points for whitespace.\n        return 2;\n      } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n        // One point for non-alphanumeric.\n        return 1;\n      }\n      return 0;\n    }\n  \n    var pointer = 1;\n    // Intentionally ignore the first and last element (don't need checking).\n    while (pointer < diffs.length - 1) {\n      if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n          diffs[pointer + 1][0] == DIFF_EQUAL) {\n        // This is a single edit surrounded by equalities.\n        var equality1 = diffs[pointer - 1][1];\n        var edit = diffs[pointer][1];\n        var equality2 = diffs[pointer + 1][1];\n  \n        // First, shift the edit as far left as possible.\n        var commonOffset = this.diff_commonSuffix(equality1, edit);\n        if (commonOffset) {\n          var commonString = edit.substring(edit.length - commonOffset);\n          equality1 = equality1.substring(0, equality1.length - commonOffset);\n          edit = commonString + edit.substring(0, edit.length - commonOffset);\n          equality2 = commonString + equality2;\n        }\n  \n        // Second, step character by character right, looking for the best fit.\n        var bestEquality1 = equality1;\n        var bestEdit = edit;\n        var bestEquality2 = equality2;\n        var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        while (edit.charAt(0) === equality2.charAt(0)) {\n          equality1 += edit.charAt(0);\n          edit = edit.substring(1) + equality2.charAt(0);\n          equality2 = equality2.substring(1);\n          var score = diff_cleanupSemanticScore_(equality1, edit) +\n              diff_cleanupSemanticScore_(edit, equality2);\n          // The >= encourages trailing rather than leading whitespace on edits.\n          if (score >= bestScore) {\n            bestScore = score;\n            bestEquality1 = equality1;\n            bestEdit = edit;\n            bestEquality2 = equality2;\n          }\n        }\n  \n        if (diffs[pointer - 1][1] != bestEquality1) {\n          // We have an improvement, save it back to the diff.\n          if (bestEquality1) {\n            diffs[pointer - 1][1] = bestEquality1;\n          } else {\n            diffs.splice(pointer - 1, 1);\n            pointer--;\n          }\n          diffs[pointer][1] = bestEdit;\n          if (bestEquality2) {\n            diffs[pointer + 1][1] = bestEquality2;\n          } else {\n            diffs.splice(pointer + 1, 1);\n            pointer--;\n          }\n        }\n      }\n      pointer++;\n    }\n  };\n  \n  // Define some regex patterns for matching boundaries.\n  diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\n  diff_match_patch.whitespaceRegex_ = /\\s/;\n  diff_match_patch.linebreakRegex_ = /[\\r\\n]/;\n  diff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\n  diff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n  \n  /**\n   * Reduce the number of edits by eliminating operationally trivial equalities.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n    var changes = false;\n    var equalities = [];  // Stack of indices where equalities are found.\n    var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n    /** @type {?string} */\n    var lastEquality = null;\n    // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n    var pointer = 0;  // Index of current position.\n    // Is there an insertion operation before the last equality.\n    var pre_ins = false;\n    // Is there a deletion operation before the last equality.\n    var pre_del = false;\n    // Is there an insertion operation after the last equality.\n    var post_ins = false;\n    // Is there a deletion operation after the last equality.\n    var post_del = false;\n    while (pointer < diffs.length) {\n      if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n        if (diffs[pointer][1].length < this.Diff_EditCost &&\n            (post_ins || post_del)) {\n          // Candidate found.\n          equalities[equalitiesLength++] = pointer;\n          pre_ins = post_ins;\n          pre_del = post_del;\n          lastEquality = diffs[pointer][1];\n        } else {\n          // Not a candidate, and can never become one.\n          equalitiesLength = 0;\n          lastEquality = null;\n        }\n        post_ins = post_del = false;\n      } else {  // An insertion or deletion.\n        if (diffs[pointer][0] == DIFF_DELETE) {\n          post_del = true;\n        } else {\n          post_ins = true;\n        }\n        /*\n         * Five types to be split:\n         * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n         * <ins>A</ins>X<ins>C</ins><del>D</del>\n         * <ins>A</ins><del>B</del>X<ins>C</ins>\n         * <ins>A</del>X<ins>C</ins><del>D</del>\n         * <ins>A</ins><del>B</del>X<del>C</del>\n         */\n        if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                             ((lastEquality.length < this.Diff_EditCost / 2) &&\n                              (pre_ins + pre_del + post_ins + post_del) == 3))) {\n          // Duplicate record.\n          diffs.splice(equalities[equalitiesLength - 1], 0,\n                       new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n          // Change second copy to insert.\n          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n          equalitiesLength--;  // Throw away the equality we just deleted;\n          lastEquality = null;\n          if (pre_ins && pre_del) {\n            // No changes made which could affect previous entry, keep going.\n            post_ins = post_del = true;\n            equalitiesLength = 0;\n          } else {\n            equalitiesLength--;  // Throw away the previous equality.\n            pointer = equalitiesLength > 0 ?\n                equalities[equalitiesLength - 1] : -1;\n            post_ins = post_del = false;\n          }\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n  \n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n  };\n  \n  \n  /**\n   * Reorder and merge like edit sections.  Merge equalities.\n   * Any edit section can move as long as it doesn't cross an equality.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   */\n  diff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n    // Add a dummy entry at the end.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n    var pointer = 0;\n    var count_delete = 0;\n    var count_insert = 0;\n    var text_delete = '';\n    var text_insert = '';\n    var commonlength;\n    while (pointer < diffs.length) {\n      switch (diffs[pointer][0]) {\n        case DIFF_INSERT:\n          count_insert++;\n          text_insert += diffs[pointer][1];\n          pointer++;\n          break;\n        case DIFF_DELETE:\n          count_delete++;\n          text_delete += diffs[pointer][1];\n          pointer++;\n          break;\n        case DIFF_EQUAL:\n          // Upon reaching an equality, check for prior redundancies.\n          if (count_delete + count_insert > 1) {\n            if (count_delete !== 0 && count_insert !== 0) {\n              // Factor out any common prefixies.\n              commonlength = this.diff_commonPrefix(text_insert, text_delete);\n              if (commonlength !== 0) {\n                if ((pointer - count_delete - count_insert) > 0 &&\n                    diffs[pointer - count_delete - count_insert - 1][0] ==\n                    DIFF_EQUAL) {\n                  diffs[pointer - count_delete - count_insert - 1][1] +=\n                      text_insert.substring(0, commonlength);\n                } else {\n                  diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                      text_insert.substring(0, commonlength)));\n                  pointer++;\n                }\n                text_insert = text_insert.substring(commonlength);\n                text_delete = text_delete.substring(commonlength);\n              }\n              // Factor out any common suffixies.\n              commonlength = this.diff_commonSuffix(text_insert, text_delete);\n              if (commonlength !== 0) {\n                diffs[pointer][1] = text_insert.substring(text_insert.length -\n                    commonlength) + diffs[pointer][1];\n                text_insert = text_insert.substring(0, text_insert.length -\n                    commonlength);\n                text_delete = text_delete.substring(0, text_delete.length -\n                    commonlength);\n              }\n            }\n            // Delete the offending records and add the merged ones.\n            pointer -= count_delete + count_insert;\n            diffs.splice(pointer, count_delete + count_insert);\n            if (text_delete.length) {\n              diffs.splice(pointer, 0,\n                  new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n              pointer++;\n            }\n            if (text_insert.length) {\n              diffs.splice(pointer, 0,\n                  new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n              pointer++;\n            }\n            pointer++;\n          } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n            // Merge this equality with the previous one.\n            diffs[pointer - 1][1] += diffs[pointer][1];\n            diffs.splice(pointer, 1);\n          } else {\n            pointer++;\n          }\n          count_insert = 0;\n          count_delete = 0;\n          text_delete = '';\n          text_insert = '';\n          break;\n      }\n    }\n    if (diffs[diffs.length - 1][1] === '') {\n      diffs.pop();  // Remove the dummy entry at the end.\n    }\n  \n    // Second pass: look for single edits surrounded on both sides by equalities\n    // which can be shifted sideways to eliminate an equality.\n    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n    var changes = false;\n    pointer = 1;\n    // Intentionally ignore the first and last element (don't need checking).\n    while (pointer < diffs.length - 1) {\n      if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n          diffs[pointer + 1][0] == DIFF_EQUAL) {\n        // This is a single edit surrounded by equalities.\n        if (diffs[pointer][1].substring(diffs[pointer][1].length -\n            diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n          // Shift the edit over the previous equality.\n          diffs[pointer][1] = diffs[pointer - 1][1] +\n              diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                          diffs[pointer - 1][1].length);\n          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n          diffs.splice(pointer - 1, 1);\n          changes = true;\n        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n            diffs[pointer + 1][1]) {\n          // Shift the edit over the next equality.\n          diffs[pointer - 1][1] += diffs[pointer + 1][1];\n          diffs[pointer][1] =\n              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n              diffs[pointer + 1][1];\n          diffs.splice(pointer + 1, 1);\n          changes = true;\n        }\n      }\n      pointer++;\n    }\n    // If shifts were made, the diff needs reordering and another shift sweep.\n    if (changes) {\n      this.diff_cleanupMerge(diffs);\n    }\n  };\n  \n  \n  /**\n   * loc is a location in text1, compute and return the equivalent location in\n   * text2.\n   * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @param {number} loc Location within text1.\n   * @return {number} Location within text2.\n   */\n  diff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n    var chars1 = 0;\n    var chars2 = 0;\n    var last_chars1 = 0;\n    var last_chars2 = 0;\n    var x;\n    for (x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n        chars1 += diffs[x][1].length;\n      }\n      if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n        chars2 += diffs[x][1].length;\n      }\n      if (chars1 > loc) {  // Overshot the location.\n        break;\n      }\n      last_chars1 = chars1;\n      last_chars2 = chars2;\n    }\n    // Was the location was deleted?\n    if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n      return last_chars2;\n    }\n    // Add the remaining character length.\n    return last_chars2 + (loc - last_chars1);\n  };\n  \n  \n  /**\n   * Convert a diff array into a pretty HTML report.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} HTML representation.\n   */\n  diff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n    var html = [];\n    var pattern_amp = /&/g;\n    var pattern_lt = /</g;\n    var pattern_gt = />/g;\n    var pattern_para = /\\n/g;\n    for (var x = 0; x < diffs.length; x++) {\n      var op = diffs[x][0];    // Operation (insert, delete, equal)\n      var data = diffs[x][1];  // Text of change.\n      var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n          .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n      switch (op) {\n        case DIFF_INSERT:\n          html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n          break;\n        case DIFF_DELETE:\n          html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n          break;\n        case DIFF_EQUAL:\n          html[x] = '<span>' + text + '</span>';\n          break;\n      }\n    }\n    return html.join('');\n  };\n  \n  \n  /**\n   * Compute and return the source text (all equalities and deletions).\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} Source text.\n   */\n  diff_match_patch.prototype.diff_text1 = function(diffs) {\n    var text = [];\n    for (var x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DIFF_INSERT) {\n        text[x] = diffs[x][1];\n      }\n    }\n    return text.join('');\n  };\n  \n  \n  /**\n   * Compute and return the destination text (all equalities and insertions).\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} Destination text.\n   */\n  diff_match_patch.prototype.diff_text2 = function(diffs) {\n    var text = [];\n    for (var x = 0; x < diffs.length; x++) {\n      if (diffs[x][0] !== DIFF_DELETE) {\n        text[x] = diffs[x][1];\n      }\n    }\n    return text.join('');\n  };\n  \n  \n  /**\n   * Compute the Levenshtein distance; the number of inserted, deleted or\n   * substituted characters.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {number} Number of changes.\n   */\n  diff_match_patch.prototype.diff_levenshtein = function(diffs) {\n    var levenshtein = 0;\n    var insertions = 0;\n    var deletions = 0;\n    for (var x = 0; x < diffs.length; x++) {\n      var op = diffs[x][0];\n      var data = diffs[x][1];\n      switch (op) {\n        case DIFF_INSERT:\n          insertions += data.length;\n          break;\n        case DIFF_DELETE:\n          deletions += data.length;\n          break;\n        case DIFF_EQUAL:\n          // A deletion and an insertion is one substitution.\n          levenshtein += Math.max(insertions, deletions);\n          insertions = 0;\n          deletions = 0;\n          break;\n      }\n    }\n    levenshtein += Math.max(insertions, deletions);\n    return levenshtein;\n  };\n  \n  \n  /**\n   * Crush the diff into an encoded string which describes the operations\n   * required to transform text1 into text2.\n   * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n   * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n   * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n   * @return {string} Delta text.\n   */\n  diff_match_patch.prototype.diff_toDelta = function(diffs) {\n    var text = [];\n    for (var x = 0; x < diffs.length; x++) {\n      switch (diffs[x][0]) {\n        case DIFF_INSERT:\n          text[x] = '+' + encodeURI(diffs[x][1]);\n          break;\n        case DIFF_DELETE:\n          text[x] = '-' + diffs[x][1].length;\n          break;\n        case DIFF_EQUAL:\n          text[x] = '=' + diffs[x][1].length;\n          break;\n      }\n    }\n    return text.join('\\t').replace(/%20/g, ' ');\n  };\n  \n  \n  /**\n   * Given the original text1, and an encoded string which describes the\n   * operations required to transform text1 into text2, compute the full diff.\n   * @param {string} text1 Source string for the diff.\n   * @param {string} delta Delta text.\n   * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n   * @throws {!Error} If invalid input.\n   */\n  diff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n    var diffs = [];\n    var diffsLength = 0;  // Keeping our own length var is faster in JS.\n    var pointer = 0;  // Cursor in text1\n    var tokens = delta.split(/\\t/g);\n    for (var x = 0; x < tokens.length; x++) {\n      // Each token begins with a one character parameter which specifies the\n      // operation of this token (delete, insert, equality).\n      var param = tokens[x].substring(1);\n      switch (tokens[x].charAt(0)) {\n        case '+':\n          try {\n            diffs[diffsLength++] =\n                new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n          } catch (ex) {\n            // Malformed URI sequence.\n            throw new Error('Illegal escape in diff_fromDelta: ' + param);\n          }\n          break;\n        case '-':\n          // Fall through.\n        case '=':\n          var n = parseInt(param, 10);\n          if (isNaN(n) || n < 0) {\n            throw new Error('Invalid number in diff_fromDelta: ' + param);\n          }\n          var text = text1.substring(pointer, pointer += n);\n          if (tokens[x].charAt(0) == '=') {\n            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n          } else {\n            diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n          }\n          break;\n        default:\n          // Blank tokens are ok (from a trailing \\t).\n          // Anything else is an error.\n          if (tokens[x]) {\n            throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                            tokens[x]);\n          }\n      }\n    }\n    if (pointer != text1.length) {\n      throw new Error('Delta length (' + pointer +\n          ') does not equal source text length (' + text1.length + ').');\n    }\n    return diffs;\n  };\n  \n  \n  //  MATCH FUNCTIONS\n  \n  \n  /**\n   * Locate the best instance of 'pattern' in 'text' near 'loc'.\n   * @param {string} text The text to search.\n   * @param {string} pattern The pattern to search for.\n   * @param {number} loc The location to search around.\n   * @return {number} Best match index or -1.\n   */\n  diff_match_patch.prototype.match_main = function(text, pattern, loc) {\n    // Check for null inputs.\n    if (text == null || pattern == null || loc == null) {\n      throw new Error('Null input. (match_main)');\n    }\n  \n    loc = Math.max(0, Math.min(loc, text.length));\n    if (text == pattern) {\n      // Shortcut (potentially not guaranteed by the algorithm)\n      return 0;\n    } else if (!text.length) {\n      // Nothing to match.\n      return -1;\n    } else if (text.substring(loc, loc + pattern.length) == pattern) {\n      // Perfect match at the perfect spot!  (Includes case of null pattern)\n      return loc;\n    } else {\n      // Do a fuzzy compare.\n      return this.match_bitap_(text, pattern, loc);\n    }\n  };\n  \n  \n  /**\n   * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n   * Bitap algorithm.\n   * @param {string} text The text to search.\n   * @param {string} pattern The pattern to search for.\n   * @param {number} loc The location to search around.\n   * @return {number} Best match index or -1.\n   * @private\n   */\n  diff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n    if (pattern.length > this.Match_MaxBits) {\n      throw new Error('Pattern too long for this browser.');\n    }\n  \n    // Initialise the alphabet.\n    var s = this.match_alphabet_(pattern);\n  \n    var dmp = this;  // 'this' becomes 'window' in a closure.\n  \n    /**\n     * Compute and return the score for a match with e errors and x location.\n     * Accesses loc and pattern through being a closure.\n     * @param {number} e Number of errors in match.\n     * @param {number} x Location of match.\n     * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n     * @private\n     */\n    function match_bitapScore_(e, x) {\n      var accuracy = e / pattern.length;\n      var proximity = Math.abs(loc - x);\n      if (!dmp.Match_Distance) {\n        // Dodge divide by zero error.\n        return proximity ? 1.0 : accuracy;\n      }\n      return accuracy + (proximity / dmp.Match_Distance);\n    }\n  \n    // Highest score beyond which we give up.\n    var score_threshold = this.Match_Threshold;\n    // Is there a nearby exact match? (speedup)\n    var best_loc = text.indexOf(pattern, loc);\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n      // What about in the other direction? (speedup)\n      best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n      if (best_loc != -1) {\n        score_threshold =\n            Math.min(match_bitapScore_(0, best_loc), score_threshold);\n      }\n    }\n  \n    // Initialise the bit arrays.\n    var matchmask = 1 << (pattern.length - 1);\n    best_loc = -1;\n  \n    var bin_min, bin_mid;\n    var bin_max = pattern.length + text.length;\n    var last_rd;\n    for (var d = 0; d < pattern.length; d++) {\n      // Scan for the best match; each iteration allows for one more error.\n      // Run a binary search to determine how far from 'loc' we can stray at this\n      // error level.\n      bin_min = 0;\n      bin_mid = bin_max;\n      while (bin_min < bin_mid) {\n        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n          bin_min = bin_mid;\n        } else {\n          bin_max = bin_mid;\n        }\n        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n      }\n      // Use the result from this iteration as the maximum for the next.\n      bin_max = bin_mid;\n      var start = Math.max(1, loc - bin_mid + 1);\n      var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n  \n      var rd = Array(finish + 2);\n      rd[finish + 1] = (1 << d) - 1;\n      for (var j = finish; j >= start; j--) {\n        // The alphabet (s) is a sparse hash, so the following line generates\n        // warnings.\n        var charMatch = s[text.charAt(j - 1)];\n        if (d === 0) {  // First pass: exact match.\n          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n        } else {  // Subsequent passes: fuzzy match.\n          rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                  (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                  last_rd[j + 1];\n        }\n        if (rd[j] & matchmask) {\n          var score = match_bitapScore_(d, j - 1);\n          // This match will almost certainly be better than any existing match.\n          // But check anyway.\n          if (score <= score_threshold) {\n            // Told you so.\n            score_threshold = score;\n            best_loc = j - 1;\n            if (best_loc > loc) {\n              // When passing loc, don't exceed our current distance from loc.\n              start = Math.max(1, 2 * loc - best_loc);\n            } else {\n              // Already passed loc, downhill from here on in.\n              break;\n            }\n          }\n        }\n      }\n      // No hope for a (better) match at greater error levels.\n      if (match_bitapScore_(d + 1, loc) > score_threshold) {\n        break;\n      }\n      last_rd = rd;\n    }\n    return best_loc;\n  };\n  \n  \n  /**\n   * Initialise the alphabet for the Bitap algorithm.\n   * @param {string} pattern The text to encode.\n   * @return {!Object} Hash of character locations.\n   * @private\n   */\n  diff_match_patch.prototype.match_alphabet_ = function(pattern) {\n    var s = {};\n    for (var i = 0; i < pattern.length; i++) {\n      s[pattern.charAt(i)] = 0;\n    }\n    for (var i = 0; i < pattern.length; i++) {\n      s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n    }\n    return s;\n  };\n  \n  \n  //  PATCH FUNCTIONS\n  \n  \n  /**\n   * Increase the context until it is unique,\n   * but don't let the pattern expand beyond Match_MaxBits.\n   * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n   * @param {string} text Source text.\n   * @private\n   */\n  diff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n    if (text.length == 0) {\n      return;\n    }\n    if (patch.start2 === null) {\n      throw Error('patch not initialized');\n    }\n    var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n    var padding = 0;\n  \n    // Look for the first and last matches of pattern in text.  If two different\n    // matches are found, increase the pattern length.\n    while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n           pattern.length < this.Match_MaxBits - this.Patch_Margin -\n           this.Patch_Margin) {\n      padding += this.Patch_Margin;\n      pattern = text.substring(patch.start2 - padding,\n                               patch.start2 + patch.length1 + padding);\n    }\n    // Add one chunk for good luck.\n    padding += this.Patch_Margin;\n  \n    // Add the prefix.\n    var prefix = text.substring(patch.start2 - padding, patch.start2);\n    if (prefix) {\n      patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n    }\n    // Add the suffix.\n    var suffix = text.substring(patch.start2 + patch.length1,\n                                patch.start2 + patch.length1 + padding);\n    if (suffix) {\n      patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n    }\n  \n    // Roll back the start points.\n    patch.start1 -= prefix.length;\n    patch.start2 -= prefix.length;\n    // Extend the lengths.\n    patch.length1 += prefix.length + suffix.length;\n    patch.length2 += prefix.length + suffix.length;\n  };\n  \n  \n  /**\n   * Compute a list of patches to turn text1 into text2.\n   * Use diffs if provided, otherwise compute it ourselves.\n   * There are four ways to call this function, depending on what data is\n   * available to the caller:\n   * Method 1:\n   * a = text1, b = text2\n   * Method 2:\n   * a = diffs\n   * Method 3 (optimal):\n   * a = text1, b = diffs\n   * Method 4 (deprecated, use method 3):\n   * a = text1, b = text2, c = diffs\n   *\n   * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n   * Array of diff tuples for text1 to text2 (method 2).\n   * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n   * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n   * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n   * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n   */\n  diff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n    var text1, diffs;\n    if (typeof a == 'string' && typeof opt_b == 'string' &&\n        typeof opt_c == 'undefined') {\n      // Method 1: text1, text2\n      // Compute diffs from text1 and text2.\n      text1 = /** @type {string} */(a);\n      diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n      if (diffs.length > 2) {\n        this.diff_cleanupSemantic(diffs);\n        this.diff_cleanupEfficiency(diffs);\n      }\n    } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n        typeof opt_c == 'undefined') {\n      // Method 2: diffs\n      // Compute text1 from diffs.\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n      text1 = this.diff_text1(diffs);\n    } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n        typeof opt_c == 'undefined') {\n      // Method 3: text1, diffs\n      text1 = /** @type {string} */(a);\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n    } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n        opt_c && typeof opt_c == 'object') {\n      // Method 4: text1, text2, diffs\n      // text2 is not used.\n      text1 = /** @type {string} */(a);\n      diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n    } else {\n      throw new Error('Unknown call format to patch_make.');\n    }\n  \n    if (diffs.length === 0) {\n      return [];  // Get rid of the null case.\n    }\n    var patches = [];\n    var patch = new diff_match_patch.patch_obj();\n    var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n    var char_count1 = 0;  // Number of characters into the text1 string.\n    var char_count2 = 0;  // Number of characters into the text2 string.\n    // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n    // text2 (postpatch_text).  We recreate the patches one by one to determine\n    // context info.\n    var prepatch_text = text1;\n    var postpatch_text = text1;\n    for (var x = 0; x < diffs.length; x++) {\n      var diff_type = diffs[x][0];\n      var diff_text = diffs[x][1];\n  \n      if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n        // A new patch starts here.\n        patch.start1 = char_count1;\n        patch.start2 = char_count2;\n      }\n  \n      switch (diff_type) {\n        case DIFF_INSERT:\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length2 += diff_text.length;\n          postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                           postpatch_text.substring(char_count2);\n          break;\n        case DIFF_DELETE:\n          patch.length1 += diff_text.length;\n          patch.diffs[patchDiffLength++] = diffs[x];\n          postpatch_text = postpatch_text.substring(0, char_count2) +\n                           postpatch_text.substring(char_count2 +\n                               diff_text.length);\n          break;\n        case DIFF_EQUAL:\n          if (diff_text.length <= 2 * this.Patch_Margin &&\n              patchDiffLength && diffs.length != x + 1) {\n            // Small equality inside a patch.\n            patch.diffs[patchDiffLength++] = diffs[x];\n            patch.length1 += diff_text.length;\n            patch.length2 += diff_text.length;\n          } else if (diff_text.length >= 2 * this.Patch_Margin) {\n            // Time for a new patch.\n            if (patchDiffLength) {\n              this.patch_addContext_(patch, prepatch_text);\n              patches.push(patch);\n              patch = new diff_match_patch.patch_obj();\n              patchDiffLength = 0;\n              // Unlike Unidiff, our patch lists have a rolling context.\n              // https://github.com/google/diff-match-patch/wiki/Unidiff\n              // Update prepatch text & pos to reflect the application of the\n              // just completed patch.\n              prepatch_text = postpatch_text;\n              char_count1 = char_count2;\n            }\n          }\n          break;\n      }\n  \n      // Update the current character count.\n      if (diff_type !== DIFF_INSERT) {\n        char_count1 += diff_text.length;\n      }\n      if (diff_type !== DIFF_DELETE) {\n        char_count2 += diff_text.length;\n      }\n    }\n    // Pick up the leftover patch if not empty.\n    if (patchDiffLength) {\n      this.patch_addContext_(patch, prepatch_text);\n      patches.push(patch);\n    }\n  \n    return patches;\n  };\n  \n  \n  /**\n   * Given an array of patches, return another array that is identical.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n   */\n  diff_match_patch.prototype.patch_deepCopy = function(patches) {\n    // Making deep copies is hard in JavaScript.\n    var patchesCopy = [];\n    for (var x = 0; x < patches.length; x++) {\n      var patch = patches[x];\n      var patchCopy = new diff_match_patch.patch_obj();\n      patchCopy.diffs = [];\n      for (var y = 0; y < patch.diffs.length; y++) {\n        patchCopy.diffs[y] =\n            new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n      }\n      patchCopy.start1 = patch.start1;\n      patchCopy.start2 = patch.start2;\n      patchCopy.length1 = patch.length1;\n      patchCopy.length2 = patch.length2;\n      patchesCopy[x] = patchCopy;\n    }\n    return patchesCopy;\n  };\n  \n  \n  /**\n   * Merge a set of patches onto the text.  Return a patched text, as well\n   * as a list of true/false values indicating which patches were applied.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @param {string} text Old text.\n   * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n   *      new text and an array of boolean values.\n   */\n  diff_match_patch.prototype.patch_apply = function(patches, text) {\n    if (patches.length == 0) {\n      return [text, []];\n    }\n  \n    // Deep copy the patches so that no changes are made to originals.\n    patches = this.patch_deepCopy(patches);\n  \n    var nullPadding = this.patch_addPadding(patches);\n    text = nullPadding + text + nullPadding;\n  \n    this.patch_splitMax(patches);\n    // delta keeps track of the offset between the expected and actual location\n    // of the previous patch.  If there are patches expected at positions 10 and\n    // 20, but the first patch was found at 12, delta is 2 and the second patch\n    // has an effective expected position of 22.\n    var delta = 0;\n    var results = [];\n    for (var x = 0; x < patches.length; x++) {\n      var expected_loc = patches[x].start2 + delta;\n      var text1 = this.diff_text1(patches[x].diffs);\n      var start_loc;\n      var end_loc = -1;\n      if (text1.length > this.Match_MaxBits) {\n        // patch_splitMax will only provide an oversized pattern in the case of\n        // a monster delete.\n        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                    expected_loc);\n        if (start_loc != -1) {\n          end_loc = this.match_main(text,\n              text1.substring(text1.length - this.Match_MaxBits),\n              expected_loc + text1.length - this.Match_MaxBits);\n          if (end_loc == -1 || start_loc >= end_loc) {\n            // Can't find valid trailing context.  Drop this patch.\n            start_loc = -1;\n          }\n        }\n      } else {\n        start_loc = this.match_main(text, text1, expected_loc);\n      }\n      if (start_loc == -1) {\n        // No match found.  :(\n        results[x] = false;\n        // Subtract the delta for this failed patch from subsequent patches.\n        delta -= patches[x].length2 - patches[x].length1;\n      } else {\n        // Found a match.  :)\n        results[x] = true;\n        delta = start_loc - expected_loc;\n        var text2;\n        if (end_loc == -1) {\n          text2 = text.substring(start_loc, start_loc + text1.length);\n        } else {\n          text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n        }\n        if (text1 == text2) {\n          // Perfect match, just shove the replacement text in.\n          text = text.substring(0, start_loc) +\n                 this.diff_text2(patches[x].diffs) +\n                 text.substring(start_loc + text1.length);\n        } else {\n          // Imperfect match.  Run a diff to get a framework of equivalent\n          // indices.\n          var diffs = this.diff_main(text1, text2, false);\n          if (text1.length > this.Match_MaxBits &&\n              this.diff_levenshtein(diffs) / text1.length >\n              this.Patch_DeleteThreshold) {\n            // The end points match, but the content is unacceptably bad.\n            results[x] = false;\n          } else {\n            this.diff_cleanupSemanticLossless(diffs);\n            var index1 = 0;\n            var index2;\n            for (var y = 0; y < patches[x].diffs.length; y++) {\n              var mod = patches[x].diffs[y];\n              if (mod[0] !== DIFF_EQUAL) {\n                index2 = this.diff_xIndex(diffs, index1);\n              }\n              if (mod[0] === DIFF_INSERT) {  // Insertion\n                text = text.substring(0, start_loc + index2) + mod[1] +\n                       text.substring(start_loc + index2);\n              } else if (mod[0] === DIFF_DELETE) {  // Deletion\n                text = text.substring(0, start_loc + index2) +\n                       text.substring(start_loc + this.diff_xIndex(diffs,\n                           index1 + mod[1].length));\n              }\n              if (mod[0] !== DIFF_DELETE) {\n                index1 += mod[1].length;\n              }\n            }\n          }\n        }\n      }\n    }\n    // Strip the padding off.\n    text = text.substring(nullPadding.length, text.length - nullPadding.length);\n    return [text, results];\n  };\n  \n  \n  /**\n   * Add some padding on text start and end so that edges can match something.\n   * Intended to be called only from within patch_apply.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @return {string} The padding string added to each side.\n   */\n  diff_match_patch.prototype.patch_addPadding = function(patches) {\n    var paddingLength = this.Patch_Margin;\n    var nullPadding = '';\n    for (var x = 1; x <= paddingLength; x++) {\n      nullPadding += String.fromCharCode(x);\n    }\n  \n    // Bump all the patches forward.\n    for (var x = 0; x < patches.length; x++) {\n      patches[x].start1 += paddingLength;\n      patches[x].start2 += paddingLength;\n    }\n  \n    // Add some padding on start of first diff.\n    var patch = patches[0];\n    var diffs = patch.diffs;\n    if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n      // Add nullPadding equality.\n      diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n      patch.start1 -= paddingLength;  // Should be 0.\n      patch.start2 -= paddingLength;  // Should be 0.\n      patch.length1 += paddingLength;\n      patch.length2 += paddingLength;\n    } else if (paddingLength > diffs[0][1].length) {\n      // Grow first equality.\n      var extraLength = paddingLength - diffs[0][1].length;\n      diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n      patch.start1 -= extraLength;\n      patch.start2 -= extraLength;\n      patch.length1 += extraLength;\n      patch.length2 += extraLength;\n    }\n  \n    // Add some padding on end of last diff.\n    patch = patches[patches.length - 1];\n    diffs = patch.diffs;\n    if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n      // Add nullPadding equality.\n      diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n      patch.length1 += paddingLength;\n      patch.length2 += paddingLength;\n    } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n      // Grow last equality.\n      var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n      diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n      patch.length1 += extraLength;\n      patch.length2 += extraLength;\n    }\n  \n    return nullPadding;\n  };\n  \n  \n  /**\n   * Look through the patches and break up any which are longer than the maximum\n   * limit of the match algorithm.\n   * Intended to be called only from within patch_apply.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   */\n  diff_match_patch.prototype.patch_splitMax = function(patches) {\n    var patch_size = this.Match_MaxBits;\n    for (var x = 0; x < patches.length; x++) {\n      if (patches[x].length1 <= patch_size) {\n        continue;\n      }\n      var bigpatch = patches[x];\n      // Remove the big old patch.\n      patches.splice(x--, 1);\n      var start1 = bigpatch.start1;\n      var start2 = bigpatch.start2;\n      var precontext = '';\n      while (bigpatch.diffs.length !== 0) {\n        // Create one of several smaller patches.\n        var patch = new diff_match_patch.patch_obj();\n        var empty = true;\n        patch.start1 = start1 - precontext.length;\n        patch.start2 = start2 - precontext.length;\n        if (precontext !== '') {\n          patch.length1 = patch.length2 = precontext.length;\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n        }\n        while (bigpatch.diffs.length !== 0 &&\n               patch.length1 < patch_size - this.Patch_Margin) {\n          var diff_type = bigpatch.diffs[0][0];\n          var diff_text = bigpatch.diffs[0][1];\n          if (diff_type === DIFF_INSERT) {\n            // Insertions are harmless.\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n            patch.diffs.push(bigpatch.diffs.shift());\n            empty = false;\n          } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                     patch.diffs[0][0] == DIFF_EQUAL &&\n                     diff_text.length > 2 * patch_size) {\n            // This is a large deletion.  Let it pass in one chunk.\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            empty = false;\n            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n            bigpatch.diffs.shift();\n          } else {\n            // Deletion or equality.  Only take as much as we can stomach.\n            diff_text = diff_text.substring(0,\n                patch_size - patch.length1 - this.Patch_Margin);\n            patch.length1 += diff_text.length;\n            start1 += diff_text.length;\n            if (diff_type === DIFF_EQUAL) {\n              patch.length2 += diff_text.length;\n              start2 += diff_text.length;\n            } else {\n              empty = false;\n            }\n            patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n            if (diff_text == bigpatch.diffs[0][1]) {\n              bigpatch.diffs.shift();\n            } else {\n              bigpatch.diffs[0][1] =\n                  bigpatch.diffs[0][1].substring(diff_text.length);\n            }\n          }\n        }\n        // Compute the head context for the next patch.\n        precontext = this.diff_text2(patch.diffs);\n        precontext =\n            precontext.substring(precontext.length - this.Patch_Margin);\n        // Append the end context for this patch.\n        var postcontext = this.diff_text1(bigpatch.diffs)\n                              .substring(0, this.Patch_Margin);\n        if (postcontext !== '') {\n          patch.length1 += postcontext.length;\n          patch.length2 += postcontext.length;\n          if (patch.diffs.length !== 0 &&\n              patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n            patch.diffs[patch.diffs.length - 1][1] += postcontext;\n          } else {\n            patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n          }\n        }\n        if (!empty) {\n          patches.splice(++x, 0, patch);\n        }\n      }\n    }\n  };\n  \n  \n  /**\n   * Take a list of patches and return a textual representation.\n   * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n   * @return {string} Text representation of patches.\n   */\n  diff_match_patch.prototype.patch_toText = function(patches) {\n    var text = [];\n    for (var x = 0; x < patches.length; x++) {\n      text[x] = patches[x];\n    }\n    return text.join('');\n  };\n  \n  \n  /**\n   * Parse a textual representation of patches and return a list of Patch objects.\n   * @param {string} textline Text representation of patches.\n   * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n   * @throws {!Error} If invalid input.\n   */\n  diff_match_patch.prototype.patch_fromText = function(textline) {\n    var patches = [];\n    if (!textline) {\n      return patches;\n    }\n    var text = textline.split('\\n');\n    var textPointer = 0;\n    var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n    while (textPointer < text.length) {\n      var m = text[textPointer].match(patchHeader);\n      if (!m) {\n        throw new Error('Invalid patch string: ' + text[textPointer]);\n      }\n      var patch = new diff_match_patch.patch_obj();\n      patches.push(patch);\n      patch.start1 = parseInt(m[1], 10);\n      if (m[2] === '') {\n        patch.start1--;\n        patch.length1 = 1;\n      } else if (m[2] == '0') {\n        patch.length1 = 0;\n      } else {\n        patch.start1--;\n        patch.length1 = parseInt(m[2], 10);\n      }\n  \n      patch.start2 = parseInt(m[3], 10);\n      if (m[4] === '') {\n        patch.start2--;\n        patch.length2 = 1;\n      } else if (m[4] == '0') {\n        patch.length2 = 0;\n      } else {\n        patch.start2--;\n        patch.length2 = parseInt(m[4], 10);\n      }\n      textPointer++;\n  \n      while (textPointer < text.length) {\n        var sign = text[textPointer].charAt(0);\n        try {\n          var line = decodeURI(text[textPointer].substring(1));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in patch_fromText: ' + line);\n        }\n        if (sign == '-') {\n          // Deletion.\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n        } else if (sign == '+') {\n          // Insertion.\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n        } else if (sign == ' ') {\n          // Minor equality.\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n        } else if (sign == '@') {\n          // Start of next patch.\n          break;\n        } else if (sign === '') {\n          // Blank line?  Whatever.\n        } else {\n          // WTF?\n          throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n        }\n        textPointer++;\n      }\n    }\n    return patches;\n  };\n  \n  \n  /**\n   * Class representing one patch operation.\n   * @constructor\n   */\n  diff_match_patch.patch_obj = function() {\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    this.diffs = [];\n    /** @type {?number} */\n    this.start1 = null;\n    /** @type {?number} */\n    this.start2 = null;\n    /** @type {number} */\n    this.length1 = 0;\n    /** @type {number} */\n    this.length2 = 0;\n  };\n  \n  \n  /**\n   * Emulate GNU diff's format.\n   * Header: @@ -382,8 +481,9 @@\n   * Indices are printed as 1-based, not 0-based.\n   * @return {string} The GNU diff string.\n   */\n  diff_match_patch.patch_obj.prototype.toString = function() {\n    var coords1, coords2;\n    if (this.length1 === 0) {\n      coords1 = this.start1 + ',0';\n    } else if (this.length1 == 1) {\n      coords1 = this.start1 + 1;\n    } else {\n      coords1 = (this.start1 + 1) + ',' + this.length1;\n    }\n    if (this.length2 === 0) {\n      coords2 = this.start2 + ',0';\n    } else if (this.length2 == 1) {\n      coords2 = this.start2 + 1;\n    } else {\n      coords2 = (this.start2 + 1) + ',' + this.length2;\n    }\n    var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n    var op;\n    // Escape the body of the patch with %xx notation.\n    for (var x = 0; x < this.diffs.length; x++) {\n      switch (this.diffs[x][0]) {\n        case DIFF_INSERT:\n          op = '+';\n          break;\n        case DIFF_DELETE:\n          op = '-';\n          break;\n        case DIFF_EQUAL:\n          op = ' ';\n          break;\n      }\n      text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n    }\n    return text.join('').replace(/%20/g, ' ');\n  };\n  \n  // CLOSURE:begin_strip\n  // Lines below here will not be included in the Closure-compatible library.\n  \n  // Export these global variables so that they survive Google's JS compiler.\n  // In a browser, 'this' will be 'window'.\n  // Users of node.js should 'require' the uncompressed version since Google's\n  // JS compiler may break the following exports for non-browser environments.\n  /** @suppress {globalThis} */\n  this['diff_match_patch'] = diff_match_patch;\n  /** @suppress {globalThis} */\n  this['DIFF_DELETE'] = DIFF_DELETE;\n  /** @suppress {globalThis} */\n  this['DIFF_INSERT'] = DIFF_INSERT;\n  /** @suppress {globalThis} */\n  this['DIFF_EQUAL'] = DIFF_EQUAL;","import en from \"./en\";\nimport sh from \"./sh\";\n\nexport default {\n    \"en\" : en,\n    \"sh\" : sh\n}","const getAgentLocale = () => {\n    let lang = localStorage.getItem(\"_locale\") || navigator.language || navigator.userLanguage || \"sh\";\n\n    //TODO care to adjust for likes of en-US, en-UK etc\n\n    return lang.slice(0,2);\n}\n\n\nconst AgentUtils = {\n    getAgentLocale\n}\n\nexport default AgentUtils;","import Locale from \"../_locale\"\nimport AgentUtils from \"./agent\"\nimport {diff_match_patch} from \"../helpers/diffpatch\";\n\nconst hashCode = function(str) {\n    var hash = 0, i, chr;\n    if (str.length === 0) return hash;\n    for (i = 0; i < str.length; i++) {\n      chr   = str.charCodeAt(i);\n      hash  = ((hash << 5) - hash) + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n    return Math.abs(hash);\n};\n\nfunction getLocalCaption(key){\n    const user_lang = AgentUtils.getAgentLocale();\n    if (Locale[user_lang][key]){\n        return Locale[user_lang][key].title\n    }\n\n    if (Locale[\"en\"][key]){\n        return Locale[\"en\"][key].title\n    }\n\n    return key;\n}\n\nfunction editDistance(s1, s2) {\n    s1 = s1.toLowerCase();\n    s2 = s2.toLowerCase();\n\n    var costs = [];\n    for (var i = 0; i <= s1.length; i++) {\n        var lastValue = i;\n        for (var j = 0; j <= s2.length; j++) {\n            if (i === 0)\n                costs[j] = j;\n            else {\n                if (j > 0) {\n                    var newValue = costs[j - 1];\n                    if (s1.charAt(i - 1) !== s2.charAt(j - 1))\n                        newValue = Math.min(Math.min(newValue, lastValue),\n                            costs[j]) + 1;\n                    costs[j - 1] = lastValue;\n                    lastValue = newValue;\n                }\n            }\n        }\n        if (i > 0)\n            costs[s2.length] = lastValue;\n    }\n    return costs[s2.length];\n}\n\nfunction similarity(s1, s2) {\n    var longer = s1;\n    var shorter = s2;\n    if (s1.length < s2.length) {\n        longer = s2;\n        shorter = s1;\n    }\n    var longerLength = longer.length;\n    if (longerLength === 0) {\n        return 1.0;\n    }\n    return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);\n}\n\nconst encode = s => {\n    try {\n        let dictionary = {},\n            out = [],\n            currentChar,\n            phrase = s[0],\n            code = 57344;\n        s = (s + \"\").split(\"\");\n        for (let i = 1; i < s.length; i++) {\n            currentChar = s[i];\n            if (dictionary[phrase + currentChar] != null) {\n                phrase += currentChar;\n            } else {\n                out.push(phrase.length > 1 ? dictionary[phrase] : phrase.codePointAt(0));\n                dictionary[phrase + currentChar] = code;\n                code++;\n                phrase = currentChar;\n            }\n        }\n        out.push(phrase.length > 1 ? dictionary[phrase] : phrase.codePointAt(0));\n        return out.map(e => String.fromCodePoint(e)).join('');\n    } catch (error) {\n        throw new Error(error);\n    }\n}\nconst decode = dataAsText => {\n    try {\n        let data = [...dataAsText].map(e => e.codePointAt(0)),\n            dictionary = {},\n            currentChar = String.fromCodePoint(data[0]),\n            oldPhrase = currentChar,\n            out = [currentChar],\n            code = 57344,\n            phrase;\n        for (let i = 1; i < data.length; i++) {\n            let currentCode = data[i];\n            if (currentCode < 57344) {\n                phrase = String.fromCodePoint(data[i]);\n            } else {\n                phrase = dictionary[currentCode] ? dictionary[currentCode] : (oldPhrase + currentChar);\n            }\n            out += phrase;\n            currentChar = phrase[0];\n            dictionary[code] = oldPhrase + currentChar;\n            code++;\n            oldPhrase = phrase;\n        }\n        return out;\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n\nconst processUpdate = (txt_patch, old_txt) => {\n    const dmp = new diff_match_patch();\n    if (txt_patch.includes(\"@\")){\n      console.log(txt_patch, old_txt)\n      const patch_from_text = dmp.patch_fromText(txt_patch);\n      const patch_apply = dmp.patch_apply(patch_from_text, old_txt)\n    \n      if (patch_apply[1][0]){\n        console.log(\"arrived to patch \", patch_apply[0])\n        return patch_apply[0]\n      }\n      return old_txt;\n    }        \n    return txt_patch    \n  }\n\nconst TextUtilities = {\n    encode,\n    processUpdate,\n    decode,\n    similarity,\n    hashCode,\n    getLocalCaption\n}\nexport default TextUtilities;","const en_dates = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst en_months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\", \n    \"November\",\n    \"December\"\n]\n\nconst getLocalDate = (datex) => {\n    const date = new Date();\n    return en_dates[date.getDay()] + \", \" + en_months[date.getMonth()] + \" \" + date.getDate() + \", \" + date.getFullYear();\n}\n\nexport default{\n    getLocalDate : getLocalDate\n}","import TextUtils from \"./text\"\nimport AgentUtils from \"./agent\"\nimport DateUtils from \"./date\"\n\nexport default {\n    TextUtils,\n    AgentUtils,\n    DateUtils\n}","import React from 'react';\nconst AnimateLoad = (WrappedComponent) => {\n    return class extends React.Component {\n        state = {didMount: false}\n        componentDidMount(){\n           setTimeout(() => {\n                this.setState({didMount: true})\n            }, 0)\n        }\n        render(){\n            const {didMount} = this.state\n            return (\n                <div className={`fade-in ${didMount && 'visible'}`}>\n                   <WrappedComponent {...this.props} />\n                </div>\n            );\n        }\n    }\n}\n\nexport default AnimateLoad;","import React from 'react'; \nimport { Chart } from 'react-charts'\nimport API from \"../../Configs/api.json\"\nimport TextUtilities from \"../../utilities/text\";\n\nexport default class BarChar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cases: localStorage.getItem(props.data) || \"\",\n      data : [[\".\", 0]],\n      update: \"\"\n    }\n  }\n  componentDidMount(){\n    const events = new EventSource(API.baseURL + API.updates); \n      events.addEventListener(this.props.data, (e) => {\n        const cases = TextUtilities.processUpdate(e.data,this.state.cases);\n              this.processCases(cases)\n      });\n      this.processCases();\n  }\n  processCases(cases){\n    const exclude = [\"today\", \"__v\",\"_id\"]\n    if (!cases){\n        cases = localStorage.getItem(this.props.data)\n    }    \n    const p = JSON.parse(cases)\n    if(p && p.length){\n      localStorage.setItem(this.props.data, cases)\n      const raw_data = p[0]\n      const data = Object.keys(raw_data).filter(k => !exclude.includes(k)).map(p => [p, Number.parseInt(raw_data[p])]).filter(a => a[1])\n      const update = TextUtilities.getLocalCaption(\"_data_actual_as_of_today\") + \": \" + raw_data[\"today\"];\n      this.setState({cases, data, update});\n    }  \n  }\n  render(){\n    const series = {\n      type: 'bar'\n    }\n    const data = [{\n      data: this.state.data\n    }];\n    const axes = [{ primary: true, type: 'ordinal', position: 'bottom', rotation: 45 },\n        { position: 'left', type: 'linear', stacked: true }\n      ] \n\n    return (\n      this.state.cases && <div className=\"my-5 py-4\">\n        <h5>\n          {this.props.caption}\n        </h5>\n        <div className=\"col-12 mt-3\" style={{ height: '300px' }}>\n          <Chart data={data} series={series} axes={axes} tooltip />\n          <div className=\"my-3\">\n            <em>{this.state.update}</em>\n          </div>\n        </div>\n     </div>\n    )\n  }\n}","import React from 'react';\n\nconst InfoCard = (props) => {\n    return (\n        <div className={props.className} >\n            <span className=\"Title h4 py-3\">\n                {props.title}\n            </span>\n            <div className=\"row py-3\">\n                <div className=\"col-12\"> \n                    {props.children}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default InfoCard;","import React from 'react';\n\nconst ZimbabweMapCard = (props) => {\n    return (\n        <div className={props.className} >\n            <div className=\"row py-3\">\n                <div className=\"col-12\"> \n                <svg baseProfile=\"tiny\" fill=\"#7c7c7c\" stroke=\"#ffffff\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" version=\"1.2\" viewBox=\"0 0 1000 918\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t         <path className=\"land\" d=\"M959.2 146.3l-0.5 0.3-3.3 3.3-2.2 0.9-2.4 0.4-7.3-0.6-1.1-0.5-2.2-1.1-1.1-0.4-17.3-2.2-3.1 0.4-3.3 1.2-6.1 3.7-3.3 1.2-1.8 0.2-5.2-0.2-1.4 0.3-1.1 0.5-2.1 1.5-2.4 1.4-3 1.1-3 0.7-2.7 0.1-1.2-0.3-2.1-0.9-1.2-0.1-1.8 0.3-2.1 0.8-3.6 2.2-1.3 1.5-1.2 1.9-0.9 2.2-1.4 6.3-0.7 1.3-1.1 1.1-4.2 2.1-1.8 1.6-1.7 2-1.2 2.3-0.8 2.4-0.8 4.4-0.6 1.3-2.9 4.9-1.7 2.1-2 1.9-2.5 1.4-0.7 0.6-0.7 0.9-1.1 2-0.7 1-1.4 1.3-3.3 1.9-1.4 1.2-1.1 1.9-0.2 2.4 0.2 2.5 0.4 2.2 0.2 3.6-1.2 3.1-2.1 2.7-10.9 10.8-2.1 3.4-0.3 1.2-2.2 2.2-11.7 6.2-0.5 0.8-1.4 2.3-1.3 2.6-0.8 1.2-0.9 1.1-1.6-0.6-0.7 0-1.4 1-6.7 6.5-1.4 1.1-1.4 0.6-4.4-1.8-1.5 0.5-2.8 1.5-1.2 0.2-0.9-1-0.6-1.3-0.4-1.4-0.2-1.4 0.3-1.5 4.3-11.3 0.2-0.8-0.1-0.8-1-0.3-20.1-1.8-1.7 0.9-1.7 1.8-2 4.3-2.7 3.1-0.2 0.7 0.8 1.7 0.8 0.5 0.9 0.1 0.3 1.2 0.1 1-2.6 11.2-0.4 5.8-1 2.1-0.8 0.9-0.8 0.4-0.9 0.2-2.3-0.1-1.3 0.5-1.5 0.2-1.2-0.1-0.6-0.1-0.7-0.4-2.1-2-3.5-5.9-2.4-0.8-0.8 0.4-0.7 0.8-0.7 0.8-0.8 0.7-0.8 0-0.8-0.5-1.8-1.2-6-3.2-7-2.9-1.2-0.8-0.5-0.8 0-1.2 0.3-1 0.9-2.6 0.5-2.4-0.2-0.5-0.8-0.2-17.9 0.1-1.2-0.8 0-3.2 1.5-11.1 0-1.9-0.2-2.1-1.7-7.6 0.5-1.6 1.8-2.9 4.8-9.2 0.2-1.3-0.6-0.7-1-1-0.2-0.6 0.4-0.7 1.1-1 1.9-1.8 1.6-1.9 1.6-2.3 0.3-0.6 0.5-1.3 1.4-11-0.2-1.6-0.6-0.7-0.7-0.3-1.5-0.5-1.5-0.2-1.3 0.5-1.6 1-0.5 0-0.6-0.5-0.1-1.3-0.4-0.8-0.7-0.5-0.7 0-0.7 0.3-1.7 1-1.5 1.2-0.6 0.2-0.7-0.1-1.7-0.8-0.8 0-3.2 0.2-1.5-0.1-0.5-0.4-0.4-0.6-0.5-2.7-0.1-3.5 0-0.5 1.6-0.9 0.3-0.4 0.1-0.7-0.9-1.2-2.1-1.7-0.7-1-0.3-1.1-0.7-11.7 0.2-1.7 0.6-1.3 2-2.6 0.6-1.2 0.2-0.8-0.1-1-0.3-1.2-0.9-1.7-0.6-0.9-0.7-0.5-1.3-0.7-1.1-0.7 0.8-2.2-0.1-0.9-1.9-4.4-0.7-0.6-1-0.5-4.1-2.5-0.7-0.3-1.5-0.2-0.6-0.3-1.7-1.1-2-0.9-0.6-0.4-0.4-0.6-1-1.9-1.3-2-0.2-0.9-0.1-1.1 1-5.7 1-3 1.1-1.8 0.5-1.3 0.9-4.2 0.3-3.4 0.6-1.7 1.6-2.9 0.3-0.7 0-1.2-0.2-1.5-0.8-2.9-0.7-1.7-1-1.8-0.9-0.5-0.8-0.2-7.3 0.4-0.7-0.1-0.9-0.6-2.2-2.5-0.5-0.9-1.1-3.5-0.5-1.1-0.7-0.6-0.7-0.3-1.7-0.2-0.8 0-4.6 0.5-1.3 0.6-0.9 0.9-0.4 1.4 0.1 0.7 0.6 2.7 0.1 0.9-0.5 1.3-0.9 1-1.1 0.6-2.8 0.7-1.1 0.7-1.2 1.5-0.6 0.3-0.7 0-2.8-0.7-1.5 0.1-1.3 0.5-0.9 0.9-0.8 2-0.4 0.5-0.5 0.4-1.4 0-1.4-0.4-1.3-0.7-0.2-0.7 0.1-1.4 2.2-5 0.8-1.3 0.7-0.6 1.5-1.1 0.4-0.5 0.4-0.8 0.2-1.1 0.1-1.8-0.7-4.3 0-0.9 0.2-1 0.4-1.1 1.6-2.6 0.6-0.6 3.3-2.2 0.5-0.6 0.2-0.8-0.1-1.3-0.3-0.7-0.6-0.4-0.7-0.1-1.4 0.1-0.6-0.1-1-0.8-0.8-1.1-0.1-0.7 0-1.4-0.2-0.9-0.9-0.8-0.7-1.1-0.2-0.6-0.3-1.4 0-1.2 0.5-3.4-0.1-1.2-0.4-0.7-2.7-1-0.6-0.4-0.9-0.8-0.7-1.2-0.2-0.7 0-1.2 0.7-0.9 33.3-28.9 1-1.7 0.5-1.9-1-2.9-0.7-1.3-1.5-1.8-0.5-1.9-0.1-5.3 0.3-1.5 4.1 1.8 3.6-0.1 5.1-2.1 0.2 10.7 0.2 12.6 0.4 25.1 14.3-0.1 9.2 0 34.5-0.3 5.7 1.2 5.1 3.7 2.1 2.2 1.9 1.4 2.1 0.3 2.8-1.2 1.5-1.3 2.4-2.7 1.9-1 1.1 0.3 1 0.8 0.9 0 1.1-1.8 3.2-2 5.6 0.4 13 3.1 2.4 0.9 2.1 1.5 1.8 2.3 2.4 4.5 1.6 1.8 2.5 1.4 1.2 0.9 0.6 1.2 0.4 1.3 0.8 0.8 0.5 0.1 1.5-0.3 0.6 0.4-0.2 1.2 0.2 0.4 2.5 0.4 2.8 0 2.5 0.4 1.9 1.3 4.9 2.5 21.3 1.4 3.2 1.4 3.5 2.9 7.7 8.5 2.5 2.1 5.3 2.9 1.5 1.2 1.2 2.4 0.6 5.1 1.1 2 2 1 13.3 2.1 25.2-0.6 10 1.5 13.2 5.3 20.2 8.2 15.3 6.2 1.4 1.4 0.6 1.9 0.1 3 1.3 5.3 3.4 2.6 0.7 0.3z\" id=\"ZWE524\" name=\"Mashonaland Central\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"infected\" d=\"M723 312.1l3.4-0.7 4.2-1.5 0.5-0.6 0.2-0.7-0.4-1.3-0.6-0.9-0.6-0.8-2.7-1.5-0.7-0.6-0.3-0.8 0.2-1.1 0.8-1.8 0-1.5-0.3-0.9-0.5-0.6-0.3-0.7 0-1.1 0.2-1.5 0.3-0.9 0.6-0.6 1.2-0.3 1.4-0.6 1.5-1.1 3.5-4.2 1.5-4.2 2.1 2 0.7 0.4 0.6 0.1 1.2 0.1 1.5-0.2 1.3-0.5 2.3 0.1 0.9-0.2 0.8-0.4 0.8-0.9 1-2.1 0.4-5.8 2.4 0.1 0.6 0.3 0.4 0.5 0.2 1 0.4 1 0.5 0.9 0.9 0.4 2.4 0.4 4.2-0.1 1.2 0.3 0.6 0.6 0.4 1.5 0.2 1.4-0.1 1.5-0.6 2.3 0 0.9 0.3 0.9 0.8 1.7 0.2 0.8-0.1 1.5 0.1 0.8 0.3 1.4 0.3 1.1 1.2 2.6 0.2 1.1-0.3 0.7-0.5 0.8-1.3 1.3-0.5 0.9-0.2 0.9-0.1 1.4-0.7 0.8-1.1 0.7-4.7 2.1-0.1 0.8 0.5 2.3 0.1 1.5-0.1 0.6-0.5 2.3-1.2 1.4-1.8 0.9-0.4 1-0.1 0.6 0.4 0.6 1.2 0.9 0.1 0.3-0.4 0.5-2.2 1.7-0.7 0.3-1.6 0.2-0.9 0.2-2.2 1.2-0.9 0.2-0.8-0.2-1.2-0.5-2.9-2.6-6.2-4.1-4.9-2.1-1.6-0.4-2.5-1-3.4-3.2z\" id=\"ZWE525\" name=\"Harare\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"infected\" d=\"M361.2 195.5l-0.1 1 0.7 1 1 0.7 1.8 0.7 0.7 0.6 0.5 0.8 0.6 1.5 0.4 1 0.6 0.7 0.9 0.3 0.8 0 1.3-0.2 0.7 0.1 1.4 0.5 0.6 0.4 0.3 0.5-0.1 0.9-0.4 1.6-0.1 0.8 0.2 0.8 0.3 0.9 0.8 1.1 0.4 0.9-0.1 1.4-0.6 1.5 0.1 0.7 0.3 0.8 0.8 1 0.5 0.9 0.1 1.1-0.1 2.3 0.7 2.2 0.2 1.3 0.3 1.2 0.5 0.8 2.5 1.9 1.2 1.5 1.4 0.9 1.1 0.5 1 0.2 1.4 1.7 1.5 5.9-0.3 4.9-0.3 1.2-1 2.7-0.1 1.7-0.2 0.6-0.9 1-0.6 2.4-0.9 2.2-0.2 0.7-0.1 1 0.1 1.1 0.5 1.7 0 2-0.3 0.6-0.9 1.8-0.7 3.2-0.7 2.1 0 1 0.8 3 0.1 1.1-0.2 0.8-3.6 3.9-2 1.7-0.8 0.9-1 0.6-0.6-0.2-0.9-0.8-1.2-0.3-1.1 0.5-3.4 3-0.2 0.7-0.4 1.6-0.6 1.4-0.1 0.8 0 1 1.5 6.3 0 1.2-0.2 0.9-1.6 3.1-1.1 2.8 0 1.7 0.3 1.3-0.2 0.8-0.4 0.6-1.1 0.6-0.5 0.5-0.4 0.5-0.2 0.7-0.3 1.6-0.6 1.3-0.9 1-2.1 1.6-0.8 0.9-0.1 1 0.2 0.8 0.6 2.1 0.3 1.9 0.3 0.8 0.6 0.7 1.2 0.8 0.8 0.1 2-0.5 0.7 0.1 0.5 0.5 0.3 1-0.1 2.7 0.2 1.5 0.7 2 0.2 0.7-0.1 0.7-0.6 1.3-0.5 0.5-1 0.7-0.9 1-0.2 0.6 0.2 0.9 0.5 0.8 1.3 0.9 1.1 0.4 2.6 0.6 1.3 0.9 0.4 1-0.3 0.4-0.6 0.3-6.9 0.8-3.5 0.8-0.7 0.4-0.5 0.7-0.5 39.4 0.2 1.9 0.5 1.9 1.4 1.2 1 0.7 0.9 0.3 0.9 0.1 1.6 0.1 6.8-0.9 0.8 0 0.7 0.1 2 1 1.6 0.4 5.2 0.3 1.7 0.3 2.3 0.6 12.8 0.4 1.6 0.4 0.8 0.1 1.5-0.1 3-0.6 6.6 0 2.4 0.5 1.8 0.1 5.2-0.3 1.1-0.2 4-1.3 0.8-0.1 8 0.1 0.7-0.2 2.3-0.1 1.5-0.3 2.6-0.9 0.7-0.1 1.7 0.1 2 0.8 2.3 0.7 1.9 0.2 47.7-0.5 1.2 0.2 0.9 0.6 1.7 3.2 0.5 1.5 0.1 1.2-0.6 1.5-1.2 0.9-22.3 9.5-7 1.7-1.2 0.6-0.9 1.2-0.1 2.4 7.5 34.1 0.5 1.6 0.7 1.5 1 1 0.9 0.6 1.6 0.5 0.9 1 1 1.4 2.7 4.7 0.5 1.1 0 1.2-0.4 1.9-0.3 0.6-0.8 1.1-0.6 0.6-0.4 1.3 0 3.8 0.2 0.9 1.1 1.6 1.5 1.1 11.5 12.6 0.8 1.3 0.3 0.9 0.1 1.6-0.4 1-2.8 4.6 0.6 1 16 15.4-1 2.3-0.7 0.7-1.3 1-1 0.2-1-0.2-0.9-0.6-0.7-0.5-1.1-0.8-1.4-0.4-4.2-0.8-0.7 0-1.8 0.3-0.7 0.5-0.3 0.7-0.1 1.6 0.4 1 0.7 0.9 1.9 1.7 0.8 1.1 0.5 1 0.2 1-0.1 1.2-0.4 2.1-0.7 1.1-1.1 1.5-5.6 5-0.5 0.6-0.4 0.8 0.3 1 0.6 0.7 1.7 1.7 0.9 0.7 1 0.6 0.8 0.8 0.4 1 0.1 1.5-0.1 5.3-0.2 1.2-0.6 2-0.9 2.5-0.1 0.9-0.4 1-0.8 1.1-3 2.2-1.7 0.7-1.4 0.3-7.6-1.5-0.7 0.1-0.4 0.4-0.1 0.9 0.2 0.8 0.5 1.3 1.8 7.1 1.2 3 0 1-0.3 0.7-2.2 3.6-1.5 1.2-8.9 5.1-5.6 2.3-0.6 0.4-0.4 0.6-0.4 1 0.1 1.7 0.8 2.7 0 0.7-0.4 0.9-12.5 15.2-2.4 2.3-2.1 1.6-0.8 2.1-3.4 3.6-1.7 0.2-1-0.2-6.6-5.4 8.6-1.9 2.1-0.9 0.9-0.7 0.7-0.8 0.4-0.8 0.3-0.8 0-0.6-0.3-0.6-0.5-0.6-2.5-1.7-0.8-1 0-0.6 0.2-1 0.8-1.5 0.6-1.9-0.1-0.7-0.4-0.4-1.7-0.7-0.5-0.4-0.2-0.6-0.1-1.6-0.6-0.5-0.8 0.1-1.7 0.8-0.9 0.3-1-0.1-0.9-0.4-1.3-1.1-0.6-0.3-1.9-0.4-0.7-0.6-0.1-0.7 0.1-0.5 0.1-1.7 0.6-1.7-0.6-0.6-0.7 0.1-2.5 0.8-2.8 0.5-0.8 0.3-1.6 1.4-0.8 0.4-1 0.1-1.3-0.4-7.2-3.9-0.9-0.2-0.6 0-0.4 0.3-0.2 0.7 0.2 1.6 1.2 5 0 1.2-0.2 0.7-0.6 1.3-0.2 1-0.1 1 0.1 1.4-0.5 0.9-0.8 0.6-1.7 1-0.4 0.6 0.1 0.6 0.6 0.7 1.6 0.5 1 0.1 1.6-0.1 1 0.1 2.2 0.6 1.5-0.1 1.5-0.7 1-0.1 1 0.4 0.9 1.5 1.2 1.3 0.3 1.4-1.6 3.7-3.3 1.4-17.2 13-0.9 0.2-0.7-0.7-1.2-2.7-0.7-2.1-0.5-1.3-0.3-0.6-1.5-2.1-1.4-1.4-0.9-2-0.5-0.4-1.2-0.7-0.9-0.9-0.8-2-2.6-2.1-2.7-3-0.4-0.5-0.1-1.7-0.2-0.6-1.1-1.7-0.6-2.1-0.3-0.6-0.5-0.5-0.7-0.4-1.8-0.7-0.7-0.4-0.5-0.5-0.8-2-0.6-0.7-1 0.1-4.3 1.8-1.3 0.2-5.4 0.2-1.2 0.4-4.7 2.4-0.5-0.1-0.7-0.3-4.5-7-0.7-0.8-0.5 0.4-0.5 1.1-1.8 5.4-0.8 4.3-0.2 3.8-0.4 1.4-0.6 0.7-4 0-5.2-0.9-1.7-0.5-1.5-1-1-1.4-1-0.9-3-1.6-2.1-1.7-9.4-9.2-2.1-1.6-2.3-1.4-1-0.9-4.5-5-2.5-3.9-0.7-0.7-0.8-0.7-0.9-0.9-0.6-1.3-0.3-2.5-0.1-1.7-0.4-1.5-0.8-1.2-1.6-1.1-0.9-1.1-1.1-1.7-1.1-0.4-1.6-0.4-3.3-0.5-2.9-0.7-1.8-1-4.4-3-2.4-1.4-2.6-0.6-6.8-0.9-1 0.1-0.9 0.2-1.1 0.7-1.8 1.5-0.9 0.3-1.1 0.2-2.1-0.2-2.3-0.5-1.9 0.1-1.5 0.3-1.4-0.3-1.5-0.9-0.7-0.2-1.6-0.2-3.2-0.5-17.7 2.2-2.8-0.6-2.3-0.2-2.3 0.1-25 6.1-2 0.7-4.1 2.3-2.2 1.3-0.5-0.5-1.8-1-5.8-1.7-2.3-1-1.8-1.9-0.9-3-1.1-2.6-2.2-2.2-5.1-3.4-2.4-1-5.1-1.2-2.3-0.9-2.5-2.3-3.5-5.5-2.8-1.5-3.9-0.7-1-0.5-1.6-1 0-0.3 0.9-0.4 0.9-1.7 0.9-2.8-0.3-1.1-1.3-1.8-1-1-1.2-1-1.4-0.6-6.8-0.1-5.7-1.6-5-3.1-3.2-4.9-12.2-34.8-3-5.9-3.8-5.2-3.2-5.3-1-2.6-0.5-3.2 0.5-2.8 2-5 0.5-2.8-3.5-10.7-16-14.5-4.5-10.1-0.8-9.9-1.5-4.7-3.2-2.9-4.9-2.5-3.7-3.3-6-8.7-1.8-1.8-4.3-3-8.4-8.9-1.7-2.8-0.6-1.8-1.2-5.6-1-2.7-4.1-6.8-4.1-10.3-2.7-5-3.9-3.1-4.3-2.6-3.5-3.7-5.3-9.1-3.6-9.3-0.9-3.2 0-3.8 5.2-11.5 0.8 1 2.4 1.1 3.9 3 2.5 1.3 1.3 0.1 3.9-0.1 4.3 1.5 1.3 0.3 9.6 0 0.7 0.1 1.2 0.7 0.8 0.2 0.7-0.3 1.1-1.2 0.8-0.3 8.6-1.7 6.7-3 3.1-0.3 1.7 1 1.5 1.4 4.8 1.3 2.8 1.4 2.6 1.7 1.1 1.4 1.2 2.1 5.8 2.4 1.8 2.3-2.1 0.8-0.1 1.9 0.9 2.2 1.3 1.5 7.7 3.7 5.5 0.2 1.4-0.2 7.1-3.7 0.9 1 0.7-1.7 2.1-0.4 2.3-0.1 1.8-0.5 0.1-0.5-0.2-1.7 0.1-0.6 0.8-0.3 2.2-0.5 2.2-1.2 2.9-0.6 1.1-0.6 4.6-3.6 1.1-0.6 1.2 0.5 0.9 1.1 0.7 1.3 0.7 0.8 1.2 0.4 5.8 0.7 1.2 0.6 1.1 0.7 0.8 0.8 0.9 0.3 4.8-0.8 5.8 1.2 9.8 5.4 5.3 1.7 3.4 0.6 2.1 0.8 1.7 1.4 2 2.3 1.7 1.5 2.1 1.1 7.3 2.3 1.8 0.3 1.5-0.4 3.7-3.4 1.6-1 2.1-0.6 3.1-0.3 12-5.6 3 1 4.7-3.1 1.3-0.6 6.1-0.3 2-0.6-0.2 1.8 0.6 1.7 1.8-1.3 1.9 0.5 1.7-1.8 0.7 0.4 1.9 0.5-0.5-1.1-0.7-0.9-1.1-0.4-1.1-0.1 0.8-1.9 1-1.4 1.1-0.5 1.4 0.8 0.3-2.5 7.5-6.4 1.9-3.1-0.8-2.1-0.9-1.1 0.1-1.2 5.4-4.1 1.8-0.4 2.2 0.8 0-1.9-1-0.7-1.1-0.2-0.5-0.5 0.3-1.6 0.6-1.1 16.8-18 4.9-3.7 2.7 1.9 1-0.9 1.9 1 2.3-1.3 1.8-2.3 0.9-2-1.5 1.1-1.2 1.4-1.3 1.1-2.1 0.1 4.4-5.5-0.2-1.6 0.3-0.8 1.2-0.4 3.5 0 4.1-0.6 2.3-0.7 1-0.9 1.1-5.7-0.2-2.1 1.3 0.7 0.2 1.3-0.6 3.4 0.9 0 4.6-15.3 2.3-3.8 2.3-1.5 0.7-1.1-0.8-1.5-0.3-1.4 0.9-1.3 1.6-1 1.3-0.5-1.5-3.9 0.1-1.8 2.6 1.2 0.7-1.5 2.1-1.9 0.8-1.3-2.3-0.4 2-1.5 6.4-2.7 4.5-3.2 1.6-0.4 1.3 0.9 1 1.4 1.2 1.1 1.8-0.6-1.5-1.8-1.2-2 5.4-1.5 2.7-1.2 2-1.4 1.1-1.2 2-3.8-0.7-1.4 0-0.9 1.1-0.4 1.5 0.8 0.8 0.3 0.8-0.2 0.5-0.7 0-0.7-0.2-0.5-0.7 0.1 0.1-1.2 0.2-1.2 0.7 0 4.2 1.5 0.9 0.1 0.4 0.4 0 1.7 0.4 0.5 0.8 0.1 0.7-0.4 2.3 3.1 0.4 0.4z\" id=\"ZWE526\" name=\"Matabeleland North\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"land\" d=\"M657.2 434.8l6.8 1.8 2.2 0.9 2 2 3.2 2.3 5.5 2.4 2.5 0.7 1.9 0.8 2.7 2.4 0.9 0.4 2 0.4 2 0.4 3.4 0 2.7 0.4 1 0.4 1.1 0.6 0.8 0.4 0.9 0.2-0.3 0.7-1.3 2.2-0.2 0.5 0.1 0.9 0.4 1.2 2.6 4.6 3 4.2 0.7 1.1 0.4 1 0.3 1.8-0.1 0.5-1.1 0.3-0.5 0.4-0.6 1.9-0.1 0.9 0.4 1.4-0.1 1.1 0.2 0.7 0.4 0.5 2.6 2.1 1.9 2.1 2.5 2.2 1.9 2.4 1.6 1.5 0.6 0.2 3.2 0.8 3.2 1.8-17.9 14.7-1 1-0.3 0.7 0.6 0.5 0.8 0.3 3.9 0.9 1 0.5 0.7 0.8 0.1 1-0.6 1.1-1.7 1-1.3 0.6-0.8 0.6-0.3 1.2-0.2 11.1-1.4 7.2 0.4 2.2 0.6 1.8 0.1 1.4-0.1 1.4-2.3 11 0 1 0.1 3.4-0.1 0.8-1.4 4.3-0.4 2.5 0.1 1.7 0.1 1.5 0.4 1 0.8 0.7 0.2 0.5-0.2 0.6-1.1 0.6-0.9 0.4-3.7 0.9-1.6 0.1-1.6-0.1-3.8-1.1-3.5-1.9-1-0.4-1.2 0-10.9 0.3-1.2 0.7-1.4 2.8-0.1 0.6 0.5 1.5 0.5 0.6 0.1 1.1 0.6 1.4 0 0.8-1.1 1.5-3 2.2-0.3 0.6-0.3 1.3 0 0.7 0.3 0.9-0.4 1.3 0.1 0.8 1.4 0.2-0.7 0.6-1.5 0.4-19.9 0.8-1.5 0.3-9.6 4.7-1 0.7-0.4 0.7 0.7 0.9 0.3 1.1 0.2 1.8-0.9 4.8-1.5 2.9-0.7 5.6 0.1 3.9 0.3 0.3 0.9-0.3 2.2-1.5 2.1 0.2 2.1 0.6 1.6 1.1 0.8 1 0.6 1.7 0.4 2.2 0.2 2.7-0.1 2.7-1 3.4-0.1 1.4 0.4 0.8 0.6 0.3 0.5 0.5 1.7 2.9 1.4 1.4 1.3 0.6 1.4 0.5 2.4 0.1 0.7 0.2 0.5 0.3 0.3 0.6-0.1 1.4 0 0.8 0.6 1.4 0.8 1 1.1 0.8 0.7 0.3 1.5 0.2 0.6 0.3 0.5 0.4 0.4 0.6 0.5 1.4 0.4 0.6 0.9 1 2.9 1.9 0.8 1 0.2 0.7 0.3 2.4 0.4 0.8 5.2 5.9 0.2 0.8-0.1 1-0.6 1.6-0.2 1.1 0.1 1 0.7 2.1 0 0.9-0.2 2.4 0.1 0.8 0.4 1.5 0.8 1.1 1.5 1.3 0.4 0.5 0.2 0.7 0.4 1.7 0.4 1.4 0 0.8-0.2 0.6-1.7 3-0.5 1.7 0 0.8 0.6 2.8-0.2 1.6-1.3 2.7-0.7 3.2-0.3 0.8-0.5 0.8-1.4 1.8-0.5 0.6-0.1 0.8 0.6 10-0.3 2.1-0.9 1.5-12.7 11.8-1.2 0.1-0.9-0.1-1.7-0.6-2.4-1.4-1 0.1-1.3 1-1.6 0.7-1.1 0.6-0.9 0.1-3.5-0.6-2.3 0-3.2-0.4-1.2-0.3-1.3-0.7-0.7-0.7-1.3-1.4-0.7-0.4-2.9-0.9-1.6-0.9-1.2-1.2-2-2.7-1.3-0.9-2-0.8-1.4-0.9-0.8-0.8-1.1-0.8-0.9-0.6-0.8-0.7-0.7-0.6-0.9-0.6-0.9-0.3-1.5 0-1.4 0.1-1.2 0.5-1.6 0.9-15.1 12.7-2.6 1.3-1.5 0.2-1 0.1-6.5-0.9-2 0-4 0.5-8.9 2.1-5.2-0.2-4.7-1.2-3.5-0.1-0.6-0.1-2.5-0.8-1.4-0.7-0.3-0.5-0.1-0.5 1.7-1.5 18.1-12.5 0.5-0.8 0.4-1.2 6.8-31.8-0.1-0.9-0.8-0.1-5.4 1.8-1.2 0.1-0.7-0.3-0.5-1.6-0.5-1.1-0.8-1.2-1.2-1.1-0.3-0.6-0.2-0.7 0.3-1.2 0.6-1.4 0.8-0.3 0.9-0.6 0.8-0.9 0-1.7 1.2-2.9 0.2-1.5 0-7.1 0.9-0.2 1 0.3 4.2 3 1.2 0.5 1.1-0.6 0.9-0.8 2.2-2.8 0.9-1.9 1-2.6 0.3-1.4 0.1-1.1-0.2-4.4 0-1.2 0.2-0.8 7.6-18.5 0.2-0.9 0.6-6.5 0.2-0.7 8.5-18.1 0.4-1.4 0-1.3-4-6.8-1 0-1.8 1.2-0.5 0-0.5-0.2-0.8-3.4-0.9-1.5-1.8-0.1-8.9 2.2-1.1-0.3-0.6-1.6-0.9-4.2-0.5-1.4-0.7-0.1-0.7 0.1-1.3 0.6-0.7 0.2-5.7 1.3-0.7-0.1-0.8-0.4-5.7-4.4-8.4-4.2-1.1-0.3-1.9-0.1-2.2 1-2.2 0.6-1.4-0.3-1.3-2.7-0.5-1.5-0.2-1.3 0-1.6 1.4-6.6-0.2-1.1-0.4-1.3-1-2.3-0.8-1.5-3.4-3.4-1.1-1.8-1-3-0.1-1.1-0.4-0.8-0.6-0.9-3-2.7-1-1.5-3-5.8-1.3-3.7-1.8-2.2-6.5-6-16-15.4-0.6-1 2.8-4.6 0.4-1-0.1-1.6-0.3-0.9-0.8-1.3-11.5-12.6-1.5-1.1-1.1-1.6-0.2-0.9 0-3.8 0.4-1.3 0.6-0.6 0.8-1.1 0.3-0.6 0.4-1.9 0-1.2-0.5-1.1-2.7-4.7-1-1.4-0.9-1-1.6-0.5-0.9-0.6-1-1-0.7-1.5-0.5-1.6-7.5-34.1 0.1-2.4 0.9-1.2 1.2-0.6 7-1.7 22.3-9.5 1.2-0.9 0.6-1.5-0.1-1.2-0.5-1.5-1.7-3.2-0.9-0.6-1.2-0.2-47.7 0.5-1.9-0.2-2.3-0.7-2-0.8-1.7-0.1-0.7 0.1-2.6 0.9-1.5 0.3-2.3 0.1-0.7 0.2-8-0.1-0.8 0.1-4 1.3-1.1 0.2-5.2 0.3-1.8-0.1-2.4-0.5-6.6 0-3 0.6-1.5 0.1-0.8-0.1-1.6-0.4-12.8-0.4-2.3-0.6-1.7-0.3-5.2-0.3-1.6-0.4-2-1-0.7-0.1-0.8 0-6.8 0.9-1.6-0.1-0.9-0.1-0.9-0.3-1-0.7-1.4-1.2-0.5-1.9-0.2-1.9 0.5-39.4 0.5-0.7 0.7-0.4 3.5-0.8 6.9-0.8 0.6-0.3 0.3-0.4-0.4-1-1.3-0.9-2.6-0.6-1.1-0.4-1.3-0.9-0.5-0.8-0.2-0.9 0.2-0.6 0.9-1 1-0.7 0.5-0.5 0.6-1.3 0.1-0.7-0.2-0.7-0.7-2-0.2-1.5 0.1-2.7-0.3-1-0.5-0.5-0.7-0.1-2 0.5-0.8-0.1-1.2-0.8-0.6-0.7-0.3-0.8-0.3-1.9-0.6-2.1-0.2-0.8 0.1-1 0.8-0.9 2.1-1.6 0.9-1 0.6-1.3 0.3-1.6 0.2-0.7 0.4-0.5 0.5-0.5 1.1-0.6 0.4-0.6 0.2-0.8-0.3-1.3 0-1.7 1.1-2.8 1.6-3.1 0.2-0.9 0-1.2-1.5-6.3 0-1 0.1-0.8 0.6-1.4 0.4-1.6 0.2-0.7 3.4-3 1.1-0.5 1.2 0.3 0.9 0.8 0.6 0.2 1-0.6 0.8-0.9 2-1.7 3.6-3.9 0.2-0.8-0.1-1.1-0.8-3 0-1 0.7-2.1 0.7-3.2 0.9-1.8 0.3-0.6 0-2-0.5-1.7-0.1-1.1 0.1-1 0.2-0.7 0.9-2.2 0.6-2.4 0.9-1 0.2-0.6 0.1-1.7 1-2.7 0.3-1.2 0.3-4.9 4.1 0.7 1.8-0.3 1.5-0.9 12.9-3 2.1-0.3 1.9 0.2 2.9 0.7 0.8-0.1 1.4-0.8 0.7 0.1 1.2 1 1.1 0.7 0.7 0 0.6-0.3 0.9-1.3 0.7-0.8 2.3-1.4 0.6-0.6 5-6.3 1.2-2.6 1.4-2.5 5.1-6 1.2-1 0.9-0.4 0.9-0.1 2.7 0.4 1.2-0.1 0.6-0.3 0.5-0.5 1.1-1.9 0.7-0.8 1.1-0.9 3.7-2.3 1-0.4 6-1.9 1.5-0.2 0.8 0 3.5 0.6 1.1 0 0.8-0.2 0.6-0.3 3.9-3.1 0.7-0.2 0.6 0.2 1.3 1.5 0.6 1.1 0.5 2.1 0.3 0.6 1.1 1.7 0.3 0.5 0.8 1.9 0.7 1.1 0.8 1 1 0.9 8.9 3 3.6 2.9 0.7 0.4 2 0.3 1.6 0.6 1.5 1.3 0.6 0.4 8 2.8 2.2 0.3 1.1-0.2 1.4-0.5 0.9-0.1 0.9 0.1 1.7 0.9 1.2 1 0.9 0.9 0.9 1.8 0.4 1.3 0.6 2.9 0.2 0.7 0.6 1.2 8.5 9.9 0.9 0.5 1.1 0.5 2.3 0.8 0.9 0.6 0.3 0.6-0.9 2.3-0.3 0.5-0.9 0.9-2.2 1.4-1 0.9-0.8 1-0.9 2-0.8 1.2-0.9 0.9-1.1 0.8-0.8 1-0.2 0.7 0 0.8 0.4 0.8 1.5 1.5 0.4 0.7 0.2 0.7 0.3 3.1-0.5 3.3-0.1 3.3-0.1 0.8-0.6 1.4-0.7 1.1-2.1 1.6-0.5 0.4-0.1 0.8 0.2 0.8 1.2 1.3 0.6 0.8 0.3 0.9-0.2 0.7-0.7 1.2-0.8 1.1-1.6 1.2-0.8 1-0.3 0.7-0.6 3.5-0.6 1.4-1.7 2.1-0.3 0.6-0.8 2.1-1.5 2.4-3.4 8.4-0.8 1.1-0.5 1.3-0.2 1.5-0.5 1-0.1 1 0.6 2 0.3 1.4 0.1 0.7-0.1 1.6 0 0.7 0.8 1.9 0.3 1.5 0.4 0.7 0.6 0.8 1.9 1.8 0.4 0.7 0.1 1.6 0.4 1.4 0.3 0.5 3.4 3.2 0.7 1.2 0.6 1.4 0.6 0.8 3.2 3.6 1 0.7 2.8 1.4 0.8 0.6 0.6 0.7 1.1 1.7 1.2 1.4 1 0.6 2 0.5 1.3 0.5 17.6 11.3 4.8 2.3 0.7 0.6 0.4 0.7 0 0.8-0.3 1.7-1.3 3.5-0.2 0.8 0 2.2-0.3 1-1.3 1.2-0.4 0.5-0.2 0.7 0 0.7 0.5 6.3-0.4 2.6 0.1 1.6 0.2 1 0.5 1.1 1 1.6 0.8 0.7 0.9 0.4 1.2 0.3 1.6 0.7 4.9 3 1.3 0.5 0.7-0.1 1.2-0.5 0.7 0 3.2 0.6 0.8 0.1 1 0.2 1.1 0.4 1.6 0.9 0.9 0.8 0.9 1.1 0.8 0.5 0.7 0 1.4-0.3 0.9 0.1 2.7 1.2 1.3 0.3 0.9 0.7 1.1 1.7 0.7 0.6 0.7 0.3 1.9 0.3 4.2 2 0.8 0.3 4.8 0.9 0.7 0 0.5-0.3 1-0.9 0.6-0.4 2-0.6 0.9-0.1 1.1 0.2 4.3 2.1 2.4 0.2 0.8 0.2 3.1 1.6 0.7 0.3 1.6 0.4 1.7 0.1 3.3-0.2 0.8 0.1 4.4 1.2 1.7 0.6 1.6 1 1.1 0.9 2.7 2.9 0.9 0.7 0.9 0.4 2 0.6 3 1.4 2.9 0.6 1.7 0.6 0.9 0.5 1.1 0.9 4.5 4.3z\" id=\"ZWE527\" name=\"Midlands\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"infected\" d=\"M989.6 220.7l-0.8 0-2.7 0.8-9.5 3.8-1.2 0.9-3 2.8-8.5 6.2-1 1.4-3.8 7.6-0.2 0.7-0.1 1.6-0.1 0.9-0.7 1.2-0.8 0.8-0.8 0.5-1.9 0.9-1.3 0.3-4 1.6-0.8 0.6-0.5 0.7-0.2 0.7-0.2 2.4-0.4 1.6-0.4 0.7-5.3 5.8-1.4 0.9-1.1 0.6-0.7 0.2-1.4 0.4-1.9 0.8-2.3 0.2-4.4 2.1-0.7 0.7-1.7 2.2-1.9 2.1-1.1 0.7-0.9 0.2-1.4-0.5-0.8-0.2-0.8 0-1.2 0.2-1.3 0.4-2.4 1.1-2 1.3-5.2 5.3-1.2 0.9-2.9 1.6-1.1 1-0.6 0.6-0.7 1.1-1.2 2.4-1 1.3-1.3 1.2-2.7 1.1-2.7 1.5-3.5 1.3-0.8 0.5-0.6 0.6-0.6 1.4-0.9 5.1-0.1 1.6 0.3 2.3-0.1 0.6-0.5 0.7-29.9 30.6-0.1 0.8 0 0.9 0.3 2.3-0.5 1.4-1 1.8-4.8 6.4-0.4 1.6-0.2 4.4 0.3 2.3 0.4 1.3 0.3 0.5 0.1 1.4-1.9 3.7-0.4 1.4 0.4 2.6-0.2 1.4-0.9 0.7-1.3 0.5-5.6 1.3-1.2 0.5-1 0.6-0.5 1.1-0.2 1.2-0.1 1.4-0.3 1.3-0.3 1.1-1.6 1.3-0.7 0.9 0.5 1 1.4 2.3 0.4 2.2 1.1 2.3 0.1 1.1-0.5 1.4-0.7 1.7 0 1 0.6 1.3 0.3 1.5 0.2 0.6 1.2 1.6 1.2 2.4 0.8 1.1 1.4 1.4 1.1 1.7 1.2 1.6 0.6 1.4 0.6 2.6 0.5 1.5 0.7 1.1 0.5 0.4 1.4 0.6 2.3 0.1 1.5 0.3 1.2 0.8 0.3 0.6 2.8 7.1 2.3 11.7 0.6 1.3 0.4 0.4 1.8 1.1 0.4 0.6 0.3 1.4 0.6 1.2 1.2 1.6 0.7 1.2 0.5 1.2 0.2 1.3-0.4 5.7 0.1 2.5-0.4 2.6 0 1.8 0.6 3.3-0.8 2.4-0.8-0.7-1-0.3-1.3-0.3-0.9 0-2.2 0.7-1.2 0.2-2.6-0.6-5.1-2.5-4.7-1.2-2-1.5-4.8-5-1.8-1.2-2.1-0.7-2.2 0.2-6.3 1-2.4-0.1-4.2-2-2.8-0.8-1.2 0.1-0.5 0.4 0.2 0.6 0.9 1 0.4 1.2-0.1 0.6-0.9 1.9-1 2.9-1.8 3.9-1 1.7-0.8 1.1-2.4 2.3-0.8 0.4-0.8-0.2-1.2-0.7-1.5-0.6-1.5 0-0.9-0.2-0.8-0.3-0.2-0.7-0.1-1.4-0.5-1.3-2.4-2.4-0.8-0.5-1-0.4-0.7 0.1-0.6 0.4-1 1-0.7 0.6-0.8 0.2-0.8-0.1-1.3-0.5-1.2-0.7-1.2-0.3-1.7-0.1-3.4 0.3-1.3 0.6-0.6 0.8-0.1 0.6-0.5 0.8-0.1 5.4-1.3 3.2 0 6.6-1.5 0.8-12.4 1.4-20.1 0.5-5.5-0.8-0.4-0.7-0.2-0.7-0.1-1.6 0.1-1.7 0.4-1.6 0.6-1.3-0.2-0.6 0.5-0.7 0.3-1 0-1.7-0.9-0.3-4.4-0.4-1.4 0.2-0.8 0.7-1.4 2.1-0.8 1-1.1 0.5-1.8 0.3-0.8 0.2-0.3 0.5 0.2 1.1 0.5 1.2-0.2 2.9-5.5 5.1-3.2-1.8-3.2-0.8-0.6-0.2-1.6-1.5-1.9-2.4-2.5-2.2-1.9-2.1-2.6-2.1-0.4-0.5-0.2-0.7 0.1-1.1-0.4-1.4 0.1-0.9 0.6-1.9 0.5-0.4 1.1-0.3 0.1-0.5-0.3-1.8-0.4-1-0.7-1.1-3-4.2-2.6-4.6-0.4-1.2-0.1-0.9 0.2-0.5 1.3-2.2 0.3-0.7-0.9-0.2-0.8-0.4-1.1-0.6-1-0.4-2.7-0.4-3.4 0-2-0.4-2-0.4-0.9-0.4-2.7-2.4-1.9-0.8-2.5-0.7-5.5-2.4-3.2-2.3-2-2-2.2-0.9-6.8-1.8 2.2-2.2 0.9-2 1.1-6.3 0.3-1.1 5.5-11.3 1-1.3 0.7-0.3 0.6 0.4 0.7 1.2 1.3 4 0.9 1.3 2.1 4.9 0.6 0.1 1-0.1 2.6-0.9 1-0.7 0.5-0.5-0.5-1.9-0.1-0.7 0.1-0.6 0.5-0.3 0.8 0.1 2.7 0.9 0.5 0.4 1.1 0.9 0.7 0.3 0.9 0.1 1.4-0.2 0.7-0.8-0.7-2.7 0-0.8 0.2-0.8 0.6-0.2 0.7 0.1 2.9 0.7 0.4 0.2 0.8 1.1 0.6-0.6 5.9-10.1 5.5-5.4 0.8-1.1 0.5-1.1 0.3-1.7 1-18.5 0.2-1.1 0.3-1.4 0.7-0.9 0.8-0.7 1.3-1 0.5-0.8 0.1-0.7-0.1-0.7-0.6-1.3-0.7-1.1-3.5-3.9-5.3-4.9-0.9-1-0.6-1.2-0.1-0.7-0.2-4.4 0.1-1.3 0.3-0.7 0.6-0.5 1.8-0.8 1-1 1.2-1.4 2.2-3.5 0.7-1.7 0.2-1.2-0.4-1.3 0.1-0.8 1.2-4.3 0.5-1.1 0.7-0.7 1.7-1.3 0.4-0.7 0-0.7-1.9-4.5-0.3-1.9 0.3-1.6 0.4-0.8 0.5-0.8 2-0.8 1.4-1 0.3-0.7 0-0.7-0.7-2-0.2-0.8 0-1.2 0.3-1.8 0.4-1 0.5-0.2 1.4 0.6 3.5 1.4 1.7 0.9 0.7 0.5 3.4 3.2 2.5 1 1.6 0.4 4.9 2.1 6.2 4.1 2.9 2.6 1.2 0.5 0.8 0.2 0.9-0.2 2.2-1.2 0.9-0.2 1.6-0.2 0.7-0.3 2.2-1.7 0.4-0.5-0.1-0.3-1.2-0.9-0.4-0.6 0.1-0.6 0.4-1 1.8-0.9 1.2-1.4 0.5-2.3 0.1-0.6-0.1-1.5-0.5-2.3 0.1-0.8 4.7-2.1 1.1-0.7 0.7-0.8 0.1-1.4 0.2-0.9 0.5-0.9 1.3-1.3 0.5-0.8 0.3-0.7-0.2-1.1-1.2-2.6-0.3-1.1-0.3-1.4-0.1-0.8 0.1-1.5-0.2-0.8-0.8-1.7-0.3-0.9 0-0.9 0.6-2.3 0.1-1.5-0.2-1.4-0.4-1.5-0.6-0.6-1.2-0.3-4.2 0.1-2.4-0.4-0.9-0.4-0.5-0.9-0.4-1-0.2-1-0.4-0.5-0.6-0.3-2.4-0.1 2.6-11.2-0.1-1-0.3-1.2-0.9-0.1-0.8-0.5-0.8-1.7 0.2-0.7 2.7-3.1 2-4.3 1.7-1.8 1.7-0.9 20.1 1.8 1 0.3 0.1 0.8-0.2 0.8-4.3 11.3-0.3 1.5 0.2 1.4 0.4 1.4 0.6 1.3 0.9 1 1.2-0.2 2.8-1.5 1.5-0.5 4.4 1.8 1.4-0.6 1.4-1.1 6.7-6.5 1.4-1 0.7 0 1.6 0.6 0.9-1.1 0.8-1.2 1.3-2.6 1.4-2.3 0.5-0.8 11.7-6.2 2.2-2.2 0.3-1.2 2.1-3.4 10.9-10.8 2.1-2.7 1.2-3.1-0.2-3.6-0.4-2.2-0.2-2.5 0.2-2.4 1.1-1.9 1.4-1.2 3.3-1.9 1.4-1.3 0.7-1 1.1-2 0.7-0.9 0.7-0.6 2.5-1.4 2-1.9 1.7-2.1 2.9-4.9 0.6-1.3 0.8-4.4 0.8-2.4 1.2-2.3 1.7-2 1.8-1.6 4.2-2.1 1.1-1.1 0.7-1.3 1.4-6.3 0.9-2.2 1.2-1.9 1.3-1.5 3.6-2.2 2.1-0.8 1.8-0.3 1.2 0.1 2.1 0.9 1.2 0.3 2.7-0.1 3-0.7 3-1.1 2.4-1.4 2.1-1.5 1.1-0.5 1.4-0.3 5.2 0.2 1.8-0.2 3.3-1.2 6.1-3.7 3.3-1.2 3.1-0.4 17.3 2.2 1.1 0.4 2.2 1.1 1.1 0.5 7.3 0.6 2.4-0.4 2.2-0.9 3.3-3.3 0.5-0.3 1.2-0.7 1.7-0.7 2-0.3 4 0.2 7.8 1.8 4 0.2 2.1-0.6 3.8-2.4 2.2-0.9 1.5-0.2-0.9 3.8-3.6 14.1-2.1 4.3-2 2.6-9.2 9 0.2 0.9 12.5 22.4 3.3 7.7 1.7 8.2 0.2 5z\" id=\"ZWE528\" name=\"Mashonaland East\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"land\" d=\"M918.1 764.8l-12.2-7.9-2.1-2.6 0.2-2.1-4.5-11.1-1-3.2-0.6-0.7-8.9-4.5 1.4-2.1-0.4-1.3-2.8-2.3-0.7-1.2-0.4-1.3-1.2-6.3-0.5-1.3-1.1-1.6-0.1-1.2 1.8-3 0.5-1.4 0.6-3 4.6-8.7 2.4-7 0.2-2.8 0.5-2.4 1.2-2.1 2.7-3.4 1.3-8.1 1.8-2.6 1.1-6.6 0.6-19.2 6.4-38.2 0.1-13.6-0.8-1.1-0.3-1.3-2.4-1.5-6.6-3.4-8.5-6.6-1.7-0.6-1.2-0.3-1-0.2-2.5 0.1-2.9 0.5-0.8-0.3-0.8-0.5-1.1-1.2-0.8-0.8-0.9-0.6-1.5-0.4-1.1-0.2-1.4-0.3-1.6-0.8-2.7-2-1.9-2-1-1.2-1.1-2-0.5-0.6-0.8-0.7-3.4-1.5-1.4-1.1-1-1.3-0.8-1.7-1.2-4.2-0.7-0.8-1-1.1-3.9-3.7-3-3.5-0.7-1.3-0.8-2.6-0.4-0.7-0.9-0.9-1.5-1-5.9-3.2-0.8-0.8-1.1-1.2-0.6-0.9-0.3-0.8-0.1-0.8-0.4-1.3-0.5-0.6-3.9-3.8-0.6-1.3-0.4-1 0-1.9-0.5-0.5-0.9-0.4-3.1-0.5-1.3-0.3-1.8-0.8-1.1-0.6-0.9-0.8-0.7-0.4-1-0.1-1.3 0.5-0.7 0.2-0.8-0.2-0.8-0.5-0.7-1-0.5-0.8-0.7-0.8-1.1-0.9-3.3-2.4-1.3-0.7-2.5-0.5-1.3-0.7-1.4-1.4-0.5-0.4-0.8-0.2-1.3-0.1-0.9 0.2-1.3 0.7-0.6 0.2-0.8-0.1-1.5-0.7-1.6-1.2-4.7-3.8-20.7-12.8-1.6-2.1 12.4-1.4 1.5-0.8 0-6.6 1.3-3.2 0.1-5.4 0.5-0.8 0.1-0.6 0.6-0.8 1.3-0.6 3.4-0.3 1.7 0.1 1.2 0.3 1.2 0.7 1.3 0.5 0.8 0.1 0.8-0.2 0.7-0.6 1-1 0.6-0.4 0.7-0.1 1 0.4 0.8 0.5 2.4 2.4 0.5 1.3 0.1 1.4 0.2 0.7 0.8 0.3 0.9 0.2 1.5 0 1.5 0.6 1.2 0.7 0.8 0.2 0.8-0.4 2.4-2.3 0.8-1.1 1-1.7 1.8-3.9 1-2.9 0.9-1.9 0.1-0.6-0.4-1.2-0.9-1-0.2-0.6 0.5-0.4 1.2-0.1 2.8 0.8 4.2 2 2.4 0.1 6.3-1 2.2-0.2 2.1 0.7 1.8 1.2 4.8 5 2 1.5 4.7 1.2 5.1 2.5 2.6 0.6 1.2-0.2 2.2-0.7 0.9 0 1.3 0.3 1 0.3 0.8 0.7 0.8-2.4-0.6-3.3 0-1.8 0.4-2.6-0.1-2.5 0.4-5.7-0.2-1.3-0.5-1.2-0.7-1.2-1.2-1.6-0.6-1.2-0.3-1.4-0.4-0.6-1.8-1.1-0.4-0.4-0.6-1.3-2.3-11.7-2.8-7.1-0.3-0.6-1.2-0.8-1.5-0.3-2.3-0.1-1.4-0.6-0.5-0.4-0.7-1.1-0.5-1.5-0.6-2.6-0.6-1.4-1.2-1.6-1.1-1.7-1.4-1.4-0.8-1.1-1.2-2.4-1.2-1.6-0.2-0.6-0.3-1.5-0.6-1.3 0-1 0.7-1.7 0.5-1.4-0.1-1.1-1.1-2.3-0.4-2.2-1.4-2.3-0.5-1 0.7-0.9 1.6-1.3 0.3-1.1 0.3-1.3 0.1-1.4 0.2-1.2 0.5-1.1 1-0.6 1.2-0.5 5.6-1.3 1.3-0.5 0.9-0.7 0.2-1.4-0.4-2.6 0.4-1.4 1.9-3.7-0.1-1.4-0.3-0.5-0.4-1.3-0.3-2.3 0.2-4.4 0.4-1.6 4.8-6.4 1-1.8 0.5-1.4-0.3-2.3 0-0.9 0.1-0.8 29.9-30.6 0.5-0.7 0.1-0.6-0.3-2.3 0.1-1.6 0.9-5.1 0.6-1.4 0.6-0.6 0.8-0.5 3.5-1.3 2.7-1.5 2.7-1.1 1.3-1.2 1-1.3 1.2-2.4 0.7-1.1 0.6-0.6 1.1-1 2.9-1.6 1.2-0.9 5.2-5.3 2-1.3 2.4-1.1 1.3-0.4 1.2-0.2 0.8 0 0.8 0.2 1.4 0.5 0.9-0.2 1.1-0.7 1.9-2.1 1.7-2.2 0.7-0.7 4.4-2.1 2.3-0.2 1.9-0.8 1.4-0.4 0.7-0.2 1.1-0.6 1.4-0.9 5.3-5.8 0.4-0.7 0.4-1.6 0.2-2.4 0.2-0.7 0.5-0.7 0.8-0.6 4-1.6 1.3-0.3 1.9-0.9 0.8-0.5 0.8-0.8 0.7-1.2 0.1-0.9 0.1-1.6 0.2-0.7 3.8-7.6 1-1.4 8.5-6.2 3-2.8 1.2-0.9 9.5-3.8 2.7-0.8 0.8 0 0 1.3 0.5 2.9 1.4 2.7 1.1 0.9 2.8 1.6 0.9 1.2 0.1 2.1-0.8 2.1-2.4 3.8-5 9.8-0.8 1-1.1 0.7-0.8 0.9 0 1.5 1.3 4.5 0.6 1.1 2.2 1.8 4.8 2.2 1.7 2.4 0.6 2.7-0.5 2.6-2.1 5-0.5 5.1 0.4 5.9-0.6 4.9-3.2 2.2-2.1 0.9-1.4 2.3-0.9 2.8-0.3 2.6 0.2 2.6 1.5 3.8 0.2 2.3-0.5 1.8-1 0.9-1 0.7-0.6 1 0.2 1.3 1.5 1.9-0.1 1.1-0.7 2.7 0.3 3 4.5 13.8 0.4 4.5-0.1 1-1.1 2.8-1 1.8-0.7 1-0.3 1.2 0.6 2 1.9 2.8 6 4.9 2.3 2.6 1 2.5-0.6 1.5-3.7 2.8-2.7 4-0.3-0.1 0.2 1.3 1.6 1.9 0.4 1.4-0.8 2.7-2.3 1.7-2.8 1.4-2.5 1.5-2.2 1.2-2.5 0.7-2.2 0.9-1.5 1.8-0.4 2.3 0.5 2.8 1.6 4.8 3.8 7.7 1 3.6-0.2 4.5-0.9 3.6-1.4 2.9-2.2 1.8-3.4 0.3-5.2-0.4-3.8 0.6-12.3 5.8-0.2 1.2 0.9 7.2 0.8 2 1.6 1.1-1.4 1-1.6 0.9-1.3 1.2-0.1 1.6 0.9 3 0.2 1.5-0.2 1.7 0.3 1.8 1 1.1 1.5 0.5 1.7 0.1 7.9-1.2 2.3 0.2 1.3 0.6 0.8 0.6 0.4 1 0.3 1.5 0.6 1.7 1 1 1.2 1 1.1 1.3 0.8 4.6-3.7 16.8-0.2 3.3-0.4 2.4-1 2.3-1.9 3-4.7 5.4-0.3 1.4 0.2 3.9-0.8 5.5 0.2 2.8 1.3 1.6 2.5 0.1 2.3-0.3 1.8 0.7 0.8 2.9 0.1 2.5-0.9 9.8 0 1.2 0.3 1.4 0.2 1.7-0.5 1.3-0.8 1.2-0.4 1.4 0.4 3 1.5 1.5 2.3 0.5 2.9 0.1 2.9-0.8 3.8-3.9 2.4-0.8 2.3 1.3 0.1 2.7-1 5.3 1 2.4 2.2 2.1 2.7 1.8 2.8 1.2 1.3 1.5-0.4 2.6-0.8 3.2-0.2 5.6-2.5 8-0.5 10 0.8 3.2 0.4 1-6.9-0.2-1.7 1.5-0.7 4.2-1 1.9-2 0.6-2.1 0.4-1.2 1.3-0.9 6.6-0.7 2.1-1.7 3.2-0.3 1.3 0.2 1 0.8 1.8 0.1 1.1-0.9 4.1-0.7 2-1 1.7-14 17.4-4 7.8-4.1 8.2-3.3 3.6-5.4 0.9-6-0.7-5.6 0.7-4 5.2-1.3 5.8-0.3 5.6 1.9 14.7 1.7 14.2-0.8 5.2-3 6-6.4 8.3-9.9 12.7 0.7 1.2 1.9 1.2 1.1 1.6 1.2 0 0.3 0.3 0 0.9-0.9 1.7-0.2 0.5 9.3 16 0.3 1.2-4.9-3.2z\" id=\"ZWE529\" name=\"Manicaland\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"land\" d=\"M576.1 728.4l2 6.5 0.9 2 5.8 6.8 0.6 0.4 1 0.4 3 1.8 0.5 0.5-0.1 1.4 0.3 1.2 1.3 2.9 0.7 1.1 0.6 0.7 1.1 0.2 0.7 0.3 1.2 0.8 0.5 0.7 0.3 1 0.2 3.8 0.3 0.9 0.3 0.4 1.1 0.2 1 0.4 0.5 0.5 0.2 0.7 0.3 1.7 0.3 0.4 1.3 0.7 0.7 0.7 1.9 4.6 0.6 1.2 0.6 0.8 2 1.1 1 0.8 1.1 0.9 1.4 0.8 0.7 0.5 1.3 1.4 2.2 3.7 0.5 0.7 1.4 0.8 2.4 2.2 1 1.7 0.7 1 0.7 0.6 0.8 0.3 1 0.6 0.5 0.8 0.6 1.1 0.5 0.4 0.5 0.2 1-0.2 0.6 0 1.7 0.6 0.7 0.1 1.7 0 1.1 0.5 0.5 0.8 0.5 1.9 0.5 0.5 0.7 0.3 1 0.4 2.7 1.4 0.9 0.5 1.1 0.2 0.6 0.5 0.4 0.5 0.2 0.7 0 0.8-0.2 1.8 0.4 0.6 0.5 0.4 0.8 0.2 10.4 1.3 1.4 0.5 0.7 0.1 0.7-0.2 1.3-0.5 0.7-0.1 3 1.5 3.2 2.2 2.7 1.3 1 1 4 1.4 2.5 0.2 1 0.4 0.4 0.5 0 0.6-0.8 1.1-0.2 0.5 0.1 0.5 1.1 1.6 2.6 2.8 0.7 1 1 1.8 0.6 0.3 1.4-0.1 0.7 0.3 1.6 0.9 2.9 1.2 0.8 0 0.6-0.2 1.4-0.5 0.8 0.1 0.4 0.4 0.1 0.8-0.2 1.6 0.5 0.4 1.7 0.9 0.5 0.7 0.1 0.8 0.1 1.5 0.9 3 0.4 0.9 0.4 0.6 3.3 2 0.7 0.7 0.6 0.8 0.4 0.8 5.7 7.4 0.3 0.6-0.2 1.5 0.1 1 0.9 1.5 0.8 0.8 1 0.6 1.3 0.6 0.4 0.7 0 0.7-0.2 0.6-0.1 2-0.8 1.3-0.1 0.6 0.4 0.4 1.4 0.1 1.1 0.2 1.1 0.5 1.8 1.2 0.9 0.9 0.8 1.2 0.8 0.8 1.3 1.1 0.6 0.9 0.7 1.9 0.5 0.5 0.7 0.2 1.7-0.2 1.2 0 0.6 0.5 0.3 0.6 0 1.6 0.2 0.7 0.4 0.7 1.1 1.4 0.6 1.3 0.3 2 0.5 1.2 0.6 0.7 0.6 0.5 2 0.3 1.3 0.5 0.6 0.5 0.2 0.8-0.2 1.5 0.5 0.4 0.7 0 1.6-0.1 0.9 0.1 1 0.5 0.4 0.6 0.3 1.7 0.3 1.1 0.9 1.7 0.4 0.9 0 1.7 0.3 1 1.5 2.1 0.3 0.9 0.2 1.7 0.4 1 0.7 0.5 0.8 0.3 0.9 0.2 1.5 0 0.5 0.6 1.8 3.5-1.2 0.3-2.2-0.5-4.4-1.9-13.9-3.3-7.6-0.9-3.8-1-4.1 1.7-14.2 1.2-2.5 0.8-3.5 2.4-1.9 0.6-0.9-0.3-1.9-1.4-1.2-0.3-3.7 0.1-8.2-1-2.4 0.1-2.5 0.6-4.8 2.3-2.4 0.8-5.2 0.9-4.7 0.1-4.4-1-4-2.9-1.8-1.6-1.9-1.2-2.4-0.7-3.1-0.2-5.7 0.8-2.2-0.2-3.1-1.6-3.6-2.6-1.9-0.8-3.8-0.5-0.4-1.1-2.5-2.6-1.3-0.6-2.7-0.7-1.3-0.5-3.5-2.2-1.8-0.5-4.6-0.4-3.1-1.7-4.4-0.9-7.4-5-2.6-0.7-8.6 0.4-1.5 0.6-2.3-1.6-2.6 0.3-4.8 2.2-4.3-0.4-2.4 0.5-1.1 2.3-1.4 1.4-3.2-0.3-6.3-1.6-2.7 0.6-4.7 2.6-2.7 1.5-1.9-0.1-0.8-0.2-0.9-0.5-9.7-8.5-0.8-1.3-1-2.7-0.7-1.3-1.2-1.5-0.7-0.5-12 0.4-4.7-0.8-4.8-2.5-3.8-4.2-2.5-5.2-1-5.9 0.6-5.8 1.4-2.9 2.1-3.3 1.5-3.2-0.3-2.7-2.1-1.7-5.1-1.6-2.3-1.5-3.7-0.9-7.7-0.5-3.9-1-18.7-8.8-5.8-1.9-5-3.9-1.7-0.6-3.8-0.3-4.1-1.1-1.4 0.2-1.4 0.7-4.4 1.1-2.1 0.9-2.1 0.4-2.8-0.7-10.3-5.4-5.1-1.8-4.7-0.9-15.2-0.2-9.6-1.9-7.4-0.5-2.1-0.6-1.8-1.2-1.5-1.7-0.7-1.3-1.2-2.8-0.6-1.1-0.9-0.5-0.7 0.1-0.7-0.1-0.5-1.3 0.7-1.8-0.5-0.8-1.4-0.6 0.3-1.3 1-1.6 0.4-1.1-0.3-1.4-3.8-7.8-2.1-2.3-0.8-1.3-0.2-1 0-2.1-0.3-1.1-1.2-2-4.5-5.5-3.3-5.2-3.8-4.7-8.8-6.5-2-2.1-4.4-6.1-1-2.6 0-2.4 1.6-7.2 0.1-2.9-0.9-7.7-0.1-1.3 0.4-3.1-0.1-1.5 0.2-1.8 0.7-1.3 0.9-1.1 0.7-1.6 2-11-0.3-5.5-3.2-10.8 1-4.9 1.6-4.8 0.4-5.4-1-2.4-1.8-1.8-2.3-0.9-5.1-0.1-4.5-2.1-7.2 1.4-10.2-1.4-14.5 0-4.4 0.6-4.8 2.5 2-19.6-2.3-16-6.5-16.8-1.7-2.4-2.3-1.4-2.7-0.8-2.7-0.5-1.5 0-1.3 0.1-1.3-0.1-1.5-0.6-1.4-1.1-2.2-3.2-1.2-1.3-4.3-2.4-4.1-0.4-4.2 0-4.6-0.8-14.4-7.4-4.8-0.9-3 0-2.6-0.5-2.1-1.2-2-2-1.8-2.4-0.9-1.1 2.2-1.3 4.1-2.3 2-0.7 25-6.1 2.3-0.1 2.3 0.2 2.8 0.6 17.7-2.2 3.2 0.5 1.6 0.2 0.7 0.2 1.5 0.9 1.4 0.3 1.5-0.3 1.9-0.1 2.3 0.5 2.1 0.2 1.1-0.2 0.9-0.3 1.8-1.5 1.1-0.7 0.9-0.2 1-0.1 6.8 0.9 2.6 0.6 2.4 1.4 4.4 3 1.8 1 2.9 0.7 3.3 0.5 1.6 0.4 1.1 0.4 1.1 1.7 0.9 1.1 1.6 1.1 0.8 1.2 0.4 1.5 0.1 1.7 0.3 2.5 0.6 1.3 0.9 0.9 0.8 0.7 0.7 0.7 2.5 3.9 4.5 5 1 0.9 2.3 1.4 2.1 1.6 9.4 9.2 2.1 1.7 3 1.6 1 0.9 1 1.4 1.5 1 1.7 0.5 5.2 0.9 4 0 0.6-0.7 0.4-1.4 0.2-3.8 0.8-4.3 1.8-5.4 0.5-1.1 0.5-0.4 0.7 0.8 4.5 7 0.7 0.3 0.5 0.1 4.7-2.4 1.2-0.4 5.4-0.2 1.3-0.2 4.3-1.8 1-0.1 0.6 0.7 0.8 2 0.5 0.5 0.7 0.4 1.8 0.7 0.7 0.4 0.5 0.5 0.3 0.6 0.6 2.1 1.1 1.7 0.2 0.6 0.1 1.7 0.4 0.5 2.7 3 2.6 2.1 0.8 2 0.9 0.9 1.2 0.7 0.5 0.4 0.9 2 1.4 1.4 1.5 2.1 0.3 0.6 0.5 1.3 0.7 2.1 1.2 2.7 0.7 0.7 0.9-0.2 17.2-13 3.3-1.4 2.2 2.6 1.3 0.1 4.1-3.5 1.1 0.1 0.9 0.4 1.5 0.4 1.6 0.8 6.6 5.4 1 0.2 1.7-0.2 3.4-3.6 0.8-2.1 2.1-1.6 2.4-2.3 12.5-15.2 0.4-0.9 0-0.7-0.8-2.7-0.1-1.7 0.4-1 0.4-0.6 0.6-0.4 5.6-2.3 8.9-5.1 1.5-1.2 2.2-3.6 0.3-0.7 0-1-1.2-3-1.8-7.1-0.5-1.3-0.2-0.8 0.1-0.9 0.4-0.4 0.7-0.1 7.6 1.5 1.4-0.3 1.7-0.7 3-2.2 0.8-1.1 0.4-1 0.1-0.9 0.9-2.5 0.6-2 0.2-1.2 0.1-5.3-0.1-1.5-0.4-1-0.8-0.8-1-0.6-0.9-0.7-1.7-1.7-0.6-0.7-0.3-1 0.4-0.8 0.5-0.6 5.6-5 1.1-1.5 0.7-1.1 0.4-2.1 0.1-1.2-0.2-1-0.5-1-0.8-1.1-1.9-1.7-0.7-0.9-0.4-1 0.1-1.6 0.3-0.7 0.7-0.5 1.8-0.3 0.7 0 4.2 0.8 1.4 0.4 1.1 0.8 0.7 0.5 0.9 0.6 1 0.2 1-0.2 1.3-1 0.7-0.7 1-2.3 6.5 6 1.8 2.2 1.3 3.7 3 5.8 1 1.5 3 2.7 0.6 0.9 0.4 0.8 0.1 1.1 1 3 1.1 1.8 3.4 3.4 0.8 1.5 1 2.3 0.4 1.3 0.2 1.1-1.4 6.6 0 1.6 0.2 1.3 0.5 1.5 1.3 2.7 1.4 0.3 2.2-0.6 2.2-1 1.9 0.1 1.1 0.3 8.4 4.2 5.7 4.4 0.8 0.4 0.7 0.1 5.7-1.3 0.7-0.2 1.3-0.6 0.7-0.1 0.7 0.1 0.5 1.4 0.9 4.2 0.6 1.6 1.1 0.3 8.9-2.2 1.8 0.1 0.9 1.5 0.8 3.4 0.5 0.2 0.5 0 1.8-1.2 1 0 4 6.8 0 1.3-0.4 1.4-8.5 18.1-0.2 0.7-0.6 6.5-0.2 0.9-7.6 18.5-0.2 0.8 0 1.2 0.2 4.4-0.1 1.1-0.3 1.4-1 2.6-0.9 1.9-2.2 2.8-0.9 0.8-1.1 0.6-1.2-0.5-4.2-3-1-0.3-0.9 0.2 0 7.1-0.2 1.5-1.2 2.9 0 1.7-0.8 0.9-0.9 0.6-0.8 0.3-0.6 1.4-0.3 1.2 0.2 0.7 0.3 0.6 1.2 1.1 0.8 1.2 0.5 1.1 0.5 1.6 0.7 0.3 1.2-0.1 5.4-1.8 0.8 0.1 0.1 0.9-6.8 31.8-0.4 1.2-0.5 0.8-18.1 12.5-1.7 1.5 0.1 0.5 0.3 0.5 1.4 0.7 2.5 0.8 0.6 0.1 3.5 0.1 4.7 1.2 5.2 0.2 8.9-2.1 4-0.5 2 0z\" id=\"ZWE530\" name=\"Matabeleland South\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"infected\" d=\"M432.2 621l-1.6-0.8-1.5-0.4-0.9-0.4-1.1-0.1-4.1 3.5-1.3-0.1-2.2-2.6 1.6-3.7-0.3-1.4-1.2-1.3-0.9-1.5-1-0.4-1 0.1-1.5 0.7-1.5 0.1-2.2-0.6-1-0.1-1.6 0.1-1-0.1-1.6-0.5-0.6-0.7-0.1-0.6 0.4-0.6 1.7-1 0.8-0.6 0.5-0.9-0.1-1.4 0.1-1 0.2-1 0.6-1.3 0.2-0.7 0-1.2-1.2-5-0.2-1.6 0.2-0.7 0.4-0.3 0.6 0 0.9 0.2 7.2 3.9 1.3 0.4 1-0.1 0.8-0.4 1.6-1.4 0.8-0.3 2.8-0.5 2.5-0.8 0.7-0.1 0.6 0.6-0.6 1.7-0.1 1.7-0.1 0.5 0.1 0.7 0.7 0.6 1.9 0.4 0.6 0.3 1.3 1.1 0.9 0.4 1 0.1 0.9-0.3 1.7-0.8 0.8-0.1 0.6 0.5 0.1 1.6 0.2 0.6 0.5 0.4 1.7 0.7 0.4 0.4 0.1 0.7-0.6 1.9-0.8 1.5-0.2 1 0 0.6 0.8 1 2.5 1.7 0.5 0.6 0.3 0.6 0 0.6-0.3 0.8-0.4 0.8-0.7 0.8-0.9 0.7-2.1 0.9-8.6 1.9z\" id=\"ZWE531\" name=\"Bulawayo\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"land\" d=\"M763.8 487.1l1.6 2.1 20.7 12.8 4.7 3.8 1.6 1.2 1.5 0.7 0.8 0.1 0.6-0.2 1.3-0.7 0.9-0.2 1.3 0.1 0.8 0.2 0.5 0.4 1.4 1.4 1.3 0.7 2.5 0.5 1.3 0.7 3.3 2.4 1.1 0.9 0.7 0.8 0.5 0.8 0.7 1 0.8 0.5 0.8 0.2 0.7-0.2 1.3-0.5 1 0.1 0.7 0.4 0.9 0.8 1.1 0.6 1.8 0.8 1.3 0.3 3.1 0.5 0.9 0.4 0.5 0.5 0 1.9 0.4 1 0.6 1.3 3.9 3.8 0.5 0.6 0.4 1.3 0.1 0.8 0.3 0.8 0.6 0.9 1.1 1.2 0.8 0.8 5.9 3.2 1.5 1 0.9 0.9 0.4 0.7 0.8 2.6 0.7 1.3 3 3.5 3.9 3.7 1 1.1 0.7 0.8 1.2 4.2 0.8 1.7 1 1.3 1.4 1.1 3.4 1.5 0.8 0.7 0.5 0.6 1.1 2 1 1.2 1.9 2 2.7 2 1.6 0.8 1.4 0.3 1.1 0.2 1.5 0.4 0.9 0.6 0.8 0.8 1.1 1.2 0.8 0.5 0.8 0.3 2.9-0.5 2.5-0.1 1 0.2 1.2 0.3 1.7 0.6 8.5 6.6 6.6 3.4 2.4 1.5 0.3 1.3 0.8 1.1-0.1 13.6-6.4 38.2-0.6 19.2-1.1 6.6-1.8 2.6-1.3 8.1-2.7 3.4-1.2 2.1-0.5 2.4-0.2 2.8-2.4 7-4.6 8.7-0.6 3-0.5 1.4-1.8 3 0.1 1.2 1.1 1.6 0.5 1.3 1.2 6.3 0.4 1.3 0.7 1.2 2.8 2.3 0.4 1.3-1.4 2.1 8.9 4.5 0.6 0.7 1 3.2 4.5 11.1-0.2 2.1 2.1 2.6 12.2 7.9-4.5 5.2-6.2 6.9-6.7 7.4-6.7 7.5-13.4 14.9-26.7 29.8-6.7 7.5-6.7 7.5-6.7 7.5-13.3 15-13.4 14.9-6.7 7.5-6.6 7.5-8.4 5.9-10.1 7.2-3-4.4-1.3-1-1.2-0.1-2.1 0.9-1 0.1-1.1-0.4-1.9-1.3-1-0.2-0.9-0.7-2.6-3.2-1.3-0.9-1.9 0.3-4.3 2.1-0.9 0.2-1.8-3.5-0.5-0.6-1.5 0-0.9-0.2-0.8-0.3-0.7-0.5-0.4-1-0.2-1.7-0.3-0.9-1.5-2.1-0.3-1 0-1.7-0.4-0.9-0.9-1.7-0.3-1.1-0.3-1.7-0.4-0.6-1-0.5-0.9-0.1-1.6 0.1-0.7 0-0.5-0.4 0.2-1.5-0.2-0.8-0.6-0.5-1.3-0.5-2-0.3-0.6-0.5-0.6-0.7-0.5-1.2-0.3-2-0.6-1.3-1.1-1.4-0.4-0.7-0.2-0.7 0-1.6-0.3-0.6-0.6-0.5-1.2 0-1.7 0.2-0.7-0.2-0.5-0.5-0.7-1.9-0.6-0.9-1.3-1.1-0.8-0.8-0.8-1.2-0.9-0.9-1.8-1.2-1.1-0.5-1.1-0.2-1.4-0.1-0.4-0.4 0.1-0.6 0.8-1.3 0.1-2 0.2-0.6 0-0.7-0.4-0.7-1.3-0.6-1-0.6-0.8-0.8-0.9-1.5-0.1-1 0.2-1.5-0.3-0.6-5.7-7.4-0.4-0.8-0.6-0.8-0.7-0.7-3.3-2-0.4-0.6-0.4-0.9-0.9-3-0.1-1.5-0.1-0.8-0.5-0.7-1.7-0.9-0.5-0.4 0.2-1.6-0.1-0.8-0.4-0.4-0.8-0.1-1.4 0.5-0.6 0.2-0.8 0-2.9-1.2-1.6-0.9-0.7-0.3-1.4 0.1-0.6-0.3-1-1.8-0.7-1-2.6-2.8-1.1-1.6-0.1-0.5 0.2-0.5 0.8-1.1 0-0.6-0.4-0.5-1-0.4-2.5-0.2-4-1.4-1-1-2.7-1.3-3.2-2.2-3-1.5-0.7 0.1-1.3 0.5-0.7 0.2-0.7-0.1-1.4-0.5-10.4-1.3-0.8-0.2-0.5-0.4-0.4-0.6 0.2-1.8 0-0.8-0.2-0.7-0.4-0.5-0.6-0.5-1.1-0.2-0.9-0.5-2.7-1.4-1-0.4-0.7-0.3-0.5-0.5-0.5-1.9-0.5-0.8-1.1-0.5-1.7 0-0.7-0.1-1.7-0.6-0.6 0-1 0.2-0.5-0.2-0.5-0.4-0.6-1.1-0.5-0.8-1-0.6-0.8-0.3-0.7-0.6-0.7-1-1-1.7-2.4-2.2-1.4-0.8-0.5-0.7-2.2-3.7-1.3-1.4-0.7-0.5-1.4-0.8-1.1-0.9-1-0.8-2-1.1-0.6-0.8-0.6-1.2-1.9-4.6-0.7-0.7-1.3-0.7-0.3-0.4-0.3-1.7-0.2-0.7-0.5-0.5-1-0.4-1.1-0.2-0.3-0.4-0.3-0.9-0.2-3.8-0.3-1-0.5-0.7-1.2-0.8-0.7-0.3-1.1-0.2-0.6-0.7-0.7-1.1-1.3-2.9-0.3-1.2 0.1-1.4-0.5-0.5-3-1.8-1-0.4-0.6-0.4-5.8-6.8-0.9-2-2-6.5 6.5 0.9 1-0.1 1.5-0.2 2.6-1.3 15.1-12.7 1.6-0.9 1.2-0.5 1.4-0.1 1.5 0 0.9 0.3 0.9 0.6 0.7 0.6 0.8 0.7 0.9 0.6 1.1 0.8 0.8 0.8 1.4 0.9 2 0.8 1.3 0.9 2 2.7 1.2 1.2 1.6 0.9 2.9 0.9 0.7 0.4 1.3 1.4 0.7 0.7 1.3 0.7 1.2 0.3 3.2 0.4 2.3 0 3.5 0.6 0.9-0.1 1.1-0.6 1.6-0.7 1.3-1 1-0.1 2.4 1.4 1.7 0.6 0.9 0.1 1.2-0.1 12.7-11.8 0.9-1.5 0.3-2.1-0.6-10 0.1-0.8 0.5-0.6 1.4-1.8 0.5-0.8 0.3-0.8 0.7-3.2 1.3-2.7 0.2-1.6-0.6-2.8 0-0.8 0.5-1.7 1.7-3 0.2-0.6 0-0.8-0.4-1.4-0.4-1.7-0.2-0.7-0.4-0.5-1.5-1.3-0.8-1.1-0.4-1.5-0.1-0.8 0.2-2.4 0-0.9-0.7-2.1-0.1-1 0.2-1.1 0.6-1.6 0.1-1-0.2-0.8-5.2-5.9-0.4-0.8-0.3-2.4-0.2-0.7-0.8-1-2.9-1.9-0.9-1-0.4-0.6-0.5-1.4-0.4-0.6-0.5-0.4-0.6-0.3-1.5-0.2-0.7-0.3-1.1-0.8-0.8-1-0.6-1.4 0-0.8 0.1-1.4-0.3-0.6-0.5-0.3-0.7-0.2-2.4-0.1-1.4-0.5-1.3-0.6-1.4-1.4-1.7-2.9-0.5-0.5-0.6-0.3-0.4-0.8 0.1-1.4 1-3.4 0.1-2.7-0.2-2.7-0.4-2.2-0.6-1.7-0.8-1-1.6-1.1-2.1-0.6-2.1-0.2-2.2 1.5-0.9 0.3-0.3-0.3-0.1-3.9 0.7-5.6 1.5-2.9 0.9-4.8-0.2-1.8-0.3-1.1-0.7-0.9 0.4-0.7 1-0.7 9.6-4.7 1.5-0.3 19.9-0.8 1.5-0.4 0.7-0.6-1.4-0.2-0.1-0.8 0.4-1.3-0.3-0.9 0-0.7 0.3-1.3 0.3-0.6 3-2.2 1.1-1.5 0-0.8-0.6-1.4-0.1-1.1-0.5-0.6-0.5-1.5 0.1-0.6 1.4-2.8 1.2-0.7 10.9-0.3 1.2 0 1 0.4 3.5 1.9 3.8 1.1 1.6 0.1 1.6-0.1 3.7-0.9 0.9-0.4 1.1-0.6 0.2-0.6-0.2-0.5-0.8-0.7-0.4-1-0.1-1.5-0.1-1.7 0.4-2.5 1.4-4.3 0.1-0.8-0.1-3.4 0-1 2.3-11 0.1-1.4-0.1-1.4-0.6-1.8-0.4-2.2 1.4-7.2 0.2-11.1 0.3-1.2 0.8-0.6 1.3-0.6 1.7-1 0.6-1.1-0.1-1-0.7-0.8-1-0.5-3.9-0.9-0.8-0.3-0.6-0.5 0.3-0.7 1-1 17.9-14.7 5.5-5.1 0.2-2.9-0.5-1.2-0.2-1.1 0.3-0.5 0.8-0.2 1.8-0.3 1.1-0.5 0.8-1 1.4-2.1 0.8-0.7 1.4-0.2 4.4 0.4 0.9 0.3 0 1.7-0.3 1-0.5 0.7 0.2 0.6-0.6 1.3-0.4 1.6-0.1 1.7 0.1 1.6 0.2 0.7 0.4 0.7 5.5 0.8 20.1-0.5z\" id=\"ZWE532\" name=\"Masvingo\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <path className=\"infected\" d=\"M648.6 4.2l-0.3 1.5 0.1 5.3 0.5 1.9 1.5 1.8 0.7 1.3 1 2.9-0.5 1.9-1 1.7-33.3 28.9-0.7 0.9 0 1.2 0.2 0.7 0.7 1.2 0.9 0.8 0.6 0.4 2.7 1 0.4 0.7 0.1 1.2-0.5 3.4 0 1.2 0.3 1.4 0.2 0.6 0.7 1.1 0.9 0.8 0.2 0.9 0 1.4 0.1 0.7 0.8 1.1 1 0.8 0.6 0.1 1.4-0.1 0.7 0.1 0.6 0.4 0.3 0.7 0.1 1.3-0.2 0.8-0.5 0.6-3.3 2.2-0.6 0.6-1.6 2.6-0.4 1.1-0.2 1 0 0.9 0.7 4.3-0.1 1.8-0.2 1.1-0.4 0.8-0.4 0.5-1.5 1.1-0.7 0.6-0.8 1.3-2.2 5-0.1 1.4 0.2 0.7 1.3 0.7 1.4 0.4 1.4 0 0.5-0.4 0.4-0.5 0.8-2 0.9-0.9 1.3-0.5 1.5-0.1 2.8 0.7 0.7 0 0.6-0.3 1.2-1.5 1.1-0.7 2.8-0.7 1.1-0.6 0.9-1 0.5-1.3-0.1-0.9-0.6-2.7-0.1-0.7 0.4-1.4 0.9-0.9 1.3-0.6 4.6-0.5 0.8 0 1.7 0.2 0.7 0.3 0.7 0.6 0.5 1.1 1.1 3.5 0.5 0.9 2.2 2.5 0.9 0.6 0.7 0.1 7.3-0.4 0.8 0.2 0.9 0.5 1 1.8 0.7 1.7 0.8 2.9 0.2 1.5 0 1.2-0.3 0.7-1.6 2.9-0.6 1.7-0.3 3.4-0.9 4.2-0.5 1.3-1.1 1.8-1 3-1 5.7 0.1 1.1 0.2 0.9 1.3 2 1 1.9 0.4 0.6 0.6 0.4 2 0.9 1.7 1.1 0.6 0.3 1.5 0.2 0.7 0.3 4.1 2.5 1 0.5 0.7 0.6 1.9 4.4 0.1 0.9-0.8 2.2 1.1 0.7 1.3 0.7 0.7 0.5 0.6 0.9 0.9 1.7 0.3 1.2 0.1 1-0.2 0.8-0.6 1.2-2 2.6-0.6 1.3-0.2 1.7 0.7 11.7 0.3 1.1 0.7 1 2.1 1.7 0.9 1.2-0.1 0.7-0.3 0.4-1.6 0.9 0 0.5 0.1 3.5 0.5 2.7 0.4 0.6 0.5 0.4 1.5 0.1 3.2-0.2 0.8 0 1.7 0.8 0.7 0.1 0.6-0.2 1.5-1.2 1.7-1 0.7-0.3 0.7 0 0.7 0.5 0.4 0.8 0.1 1.3 0.6 0.5 0.5 0 1.6-1 1.3-0.5 1.5 0.2 1.5 0.5 0.7 0.3 0.6 0.7 0.2 1.6-1.4 11-0.5 1.3-0.3 0.6-1.6 2.3-1.6 1.9-1.9 1.8-1.1 1-0.4 0.7 0.2 0.6 1 1 0.6 0.7-0.2 1.3-4.8 9.2-1.8 2.9-0.5 1.6 1.7 7.6 0.2 2.1 0 1.9-1.5 11.1 0 3.2 1.2 0.8 17.9-0.1 0.8 0.2 0.2 0.5-0.5 2.4-0.9 2.6-0.3 1 0 1.2 0.5 0.8 1.2 0.8 7 2.9 6 3.2 1.8 1.2 0.8 0.5 0.8 0 0.8-0.7 0.7-0.8 0.7-0.8 0.8-0.4 2.4 0.8 3.5 5.9-1.5 4.2-3.5 4.2-1.5 1.1-1.4 0.6-1.2 0.3-0.6 0.6-0.3 0.9-0.2 1.5 0 1.1 0.3 0.7 0.5 0.6 0.3 0.9 0 1.5-0.8 1.8-0.2 1.1 0.3 0.8 0.7 0.6 2.7 1.5 0.6 0.8 0.6 0.9 0.4 1.3-0.2 0.7-0.5 0.6-4.2 1.5-3.4 0.7-0.7-0.5-1.7-0.9-3.5-1.4-1.4-0.6-0.5 0.2-0.4 1-0.3 1.8 0 1.2 0.2 0.8 0.7 2 0 0.7-0.3 0.7-1.4 1-2 0.8-0.5 0.8-0.4 0.8-0.3 1.6 0.3 1.9 1.9 4.5 0 0.7-0.4 0.7-1.7 1.3-0.7 0.7-0.5 1.1-1.2 4.3-0.1 0.8 0.4 1.3-0.2 1.2-0.7 1.7-2.2 3.5-1.2 1.4-1 1-1.8 0.8-0.6 0.5-0.3 0.7-0.1 1.3 0.2 4.4 0.1 0.7 0.6 1.2 0.9 1 5.3 4.9 3.5 3.9 0.7 1.1 0.6 1.3 0.1 0.7-0.1 0.7-0.5 0.8-1.3 1-0.8 0.7-0.7 0.9-0.3 1.4-0.2 1.1-1 18.5-0.3 1.7-0.5 1.1-0.8 1.1-5.5 5.4-5.9 10.1-0.6 0.6-0.8-1.1-0.4-0.2-2.9-0.7-0.7-0.1-0.6 0.2-0.2 0.8 0 0.8 0.7 2.7-0.7 0.8-1.4 0.2-0.9-0.1-0.7-0.3-1.1-0.9-0.5-0.4-2.7-0.9-0.8-0.1-0.5 0.3-0.1 0.6 0.1 0.7 0.5 1.9-0.5 0.5-1 0.7-2.6 0.9-1 0.1-0.6-0.1-2.1-4.9-0.9-1.3-1.3-4-0.7-1.2-0.6-0.4-0.7 0.3-1 1.3-5.5 11.3-0.3 1.1-1.1 6.3-0.9 2-2.2 2.2-4.5-4.3-1.1-0.9-0.9-0.5-1.7-0.6-2.9-0.6-3-1.4-2-0.6-0.9-0.4-0.9-0.7-2.7-2.9-1.1-0.9-1.6-1-1.7-0.6-4.4-1.2-0.8-0.1-3.3 0.2-1.7-0.1-1.6-0.4-0.7-0.3-3.1-1.6-0.8-0.2-2.4-0.2-4.3-2.1-1.1-0.2-0.9 0.1-2 0.6-0.6 0.4-1 0.9-0.5 0.3-0.7 0-4.8-0.9-0.8-0.3-4.2-2-1.9-0.3-0.7-0.3-0.7-0.6-1.1-1.7-0.9-0.7-1.3-0.3-2.7-1.2-0.9-0.1-1.4 0.3-0.7 0-0.8-0.5-0.9-1.1-0.9-0.8-1.6-0.9-1.1-0.4-1-0.2-0.8-0.1-3.2-0.6-0.7 0-1.2 0.5-0.7 0.1-1.3-0.5-4.9-3-1.6-0.7-1.2-0.3-0.9-0.4-0.8-0.7-1-1.6-0.5-1.1-0.2-1-0.1-1.6 0.4-2.6-0.5-6.3 0-0.7 0.2-0.7 0.4-0.5 1.3-1.2 0.3-1 0-2.2 0.2-0.8 1.3-3.5 0.3-1.7 0-0.8-0.4-0.7-0.7-0.6-4.8-2.3-17.6-11.3-1.3-0.5-2-0.5-1-0.6-1.2-1.4-1.1-1.7-0.6-0.7-0.8-0.6-2.8-1.4-1-0.7-3.2-3.6-0.6-0.8-0.6-1.4-0.7-1.2-3.4-3.2-0.3-0.5-0.4-1.4-0.1-1.6-0.4-0.7-1.9-1.8-0.6-0.8-0.4-0.7-0.3-1.5-0.8-1.9 0-0.7 0.1-1.6-0.1-0.7-0.3-1.4-0.6-2 0.1-1 0.5-1 0.2-1.5 0.5-1.3 0.8-1.1 3.4-8.4 1.5-2.4 0.8-2.1 0.3-0.6 1.7-2.1 0.6-1.4 0.6-3.5 0.3-0.7 0.8-1 1.6-1.2 0.8-1.1 0.7-1.2 0.2-0.7-0.3-0.9-0.6-0.8-1.2-1.3-0.2-0.8 0.1-0.8 0.5-0.4 2.1-1.6 0.7-1.1 0.6-1.4 0.1-0.8 0.1-3.3 0.5-3.3-0.3-3.1-0.2-0.7-0.4-0.7-1.5-1.5-0.4-0.8 0-0.8 0.2-0.7 0.8-1 1.1-0.8 0.9-0.9 0.8-1.2 0.9-2 0.8-1 1-0.9 2.2-1.4 0.9-0.9 0.3-0.5 0.9-2.3-0.3-0.6-0.9-0.6-2.3-0.8-1.1-0.5-0.9-0.5-8.5-9.9-0.6-1.2-0.2-0.7-0.6-2.9-0.4-1.3-0.9-1.8-0.9-0.9-1.2-1-1.7-0.9-0.9-0.1-0.9 0.1-1.4 0.5-1.1 0.2-2.2-0.3-8-2.8-0.6-0.4-1.5-1.3-1.6-0.6-2-0.3-0.7-0.4-3.6-2.9-8.9-3-1-0.9-0.8-1-0.7-1.1-0.8-1.9-0.3-0.5-1.1-1.7-0.3-0.6-0.5-2.1-0.6-1.1-1.3-1.5-0.6-0.2-0.7 0.2-3.9 3.1-0.6 0.3-0.8 0.2-1.1 0-3.5-0.6-0.8 0-1.5 0.2-6 1.9-1 0.4-3.7 2.3-1.1 0.9-0.7 0.8-1.1 1.9-0.5 0.5-0.6 0.3-1.2 0.1-2.7-0.4-0.9 0.1-0.9 0.4-1.2 1-5.1 6-1.4 2.5-1.2 2.6-5 6.3-0.6 0.6-2.3 1.4-0.7 0.8-0.9 1.3-0.6 0.3-0.7 0-1.1-0.7-1.2-1-0.7-0.1-1.4 0.8-0.8 0.1-2.9-0.7-1.9-0.2-2.1 0.3-12.9 3-1.5 0.9-1.8 0.3-4.1-0.7-1.5-5.9-1.4-1.7-1-0.2-1.1-0.5-1.4-0.9-1.2-1.5-2.5-1.9-0.5-0.8-0.3-1.2-0.2-1.3-0.7-2.2 0.1-2.3-0.1-1.1-0.5-0.9-0.8-1-0.3-0.8-0.1-0.7 0.6-1.5 0.1-1.4-0.4-0.9-0.8-1.1-0.3-0.9-0.2-0.8 0.1-0.8 0.4-1.6 0.1-0.9-0.3-0.5-0.6-0.4-1.4-0.5-0.7-0.1-1.3 0.2-0.8 0-0.9-0.3-0.6-0.7-0.4-1-0.6-1.5-0.5-0.8-0.7-0.6-1.8-0.7-1-0.7-0.7-1 0.1-1 0.6 0.5 0.7-3 1.6-1.9 2.2-1.1 2.6-0.4 0-1-0.9 0 0.6-1.1-1.4-2.1 1-0.9 1.9-0.7 1.4-1.6-1.8 0.2-3.1 1.3-1.6 0.3-2.6-0.1-0.3-0.5 0.8-0.9 0.7-1.2 0.7-3.2 1-2 1.7-1.5 2.7-1.5-2.3-1.2 0.3-1.8 1.3-2 1.6-3.5 1.9-0.8 4.3-0.7 7.8-3.1 4.2-0.5 0.2 2.7 5.9-1.1 1-0.3 0.2-2.1 0.9-1.7 1.3-0.9 1.9 0.6 0.5-2.5 1.6-2 1.8-0.6 1.5 1.4-0.2 1.3-0.9 1.2-1.1 1-0.6 0.6 0.2 1.3 0.6 1.4 0.2 1 1 1.6 2.2 1 2.5 0.4 1.8 0.2 1.8 1 0.9 4.8 2.1 1.4-1.2-6.3-1-0.9-0.5-0.3-0.8-0.7-0.7-0.8-0.2-0.9 0.4-0.9 0.6 0 0.8 0.3 0.8-0.3 3.1-5.5 2.2-2.2 2.6 0.3 0.6-0.3 1.5-1 0.5-0.4-0.9-2 1.8-0.9 0.7 1.4 1.2 0.1 1.5-0.1 1.8 0.5-1-2.6 1.3-0.2 2 0.3 1.3-1 2.6 0.5 2.1-4.4 3.1-0.8 1.9 1.5-0.4 2.6 0 2.1 2.8 0.1-0.8 1.3-2.2 2.5-0.5 1.3 0.5 1.1 1.8 1 0.4 1.5 1.2 2.4 2.9 0.5 3.2-0.2 2.2 0.6 1.1-1.6 1.3-1.1 0.8-1.4-0.5-2.3 5.2 1.4 2.7-3.1 0.7-4.4-1.2-2.2-2-0.9 0.7-1.9 1.9-1.9 2-0.8 1.5 0.7 4.2 5.9 0-2.8 0.7-2.2 1.3-1.8 1.5-1.6-2.4 0.1-0.5-0.6 0.8-1.1 1.3-1.1 1.3-0.7 4.1-1.1 1.6-0.1-1.2-1.4-2.1-0.8-2.5-0.4-2.1-0.1 1.1-2.4 1.5-2.1-0.9-1-5.1 2.9-1.9 0.8-2.4 0.3-1.9-0.4-3.5-1.7 1.2-0.8 1.6-0.2 1.7 0.2 1.6 0.8 0.3-0.6 0.6-0.3-2.3-1.5-1.6-1.1-1.7-0.9-8.5-0.5-2.5 0.2 1-2.2 5.1-3.9 1.7-2.1 0.9-4.8 0.5-1.1 3.1-5-0.1-3.1-2.1-5.5-0.4-2.3 0.4-2.9 3.1-7.1-2.2-3.8 0.7-5.3 1.6-5.5 0.7-4.5-0.3-0.7-0.6-0.7-0.6-1-0.2-1.2 0.4-1.5 1.7-2.7 0.4-0.9 2.8-3.5 4.3-4.2 2.4-1.2 2.7-0.5 5.8-0.1 3.1-0.6 1.6-1.5 2.7-5.2 1.3-1.4 2-1.8 2.5-1.6 2.6-0.6 1.1-0.8 4.5-4.8 28.2-13 1.9-0.4 11-1 2.3-1.5 4.8-4 3-0.9 2.7 0.4 2.5 0.7 2.6 0.4 3.1-0.5 7.3-2.4 5.5-0.9 5.3-2.5 2.9-0.6 5.7 0.5 10.9 3 5.5 0.7 5.1-0.8 5-1.5 5.1-0.7 5.1 1.1 3.3 2.2 1.5 0.6 2-0.5 1-0.6 1.9-1.7 1.2-0.4 3.2 0.4 2 0.9z\" id=\"ZWE533\" name=\"Mashonaland West\">\n\t\t\t\t\t\t         </path>\n\t\t\t\t\t\t         <circle cx=\"803.3\" cy=\"532.7\" id=\"0\">\n\t\t\t\t\t\t         </circle>\n\t\t\t\t\t\t         <circle cx=\"803.3\" cy=\"528.6\" id=\"1\">\n\t\t\t\t\t\t         </circle>\n\t\t\t\t\t\t         <circle cx=\"814\" cy=\"524\" id=\"2\">\n\t\t\t\t\t\t         </circle>\n\t\t\t\t        </svg>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ZimbabweMapCard;","import React from 'react';\nimport Utils from \"../utilities\"\nimport AnimateLoad from \"../HOCS/AnimateLoad\"\nimport BarChart from \"../Components/Charts/barchart\";\nimport InfoCard from \"../Components/card/info\";\nimport ZimbabweMapCard from \"../Components/card/map\";\nimport TextUtilities from \"../utilities/text\";\nimport API from \"../Configs/api.json\"\n\nconst Home = AnimateLoad(class Home extends React.Component {\n        constructor(props){\n            super(props);\n            this.state = {\n                cases: localStorage.getItem(\"UpdateSummary\") ||  \"\", \n                data: [], \n                update: \"\",\n                text_data: {\n                    \"TotalTests\": 0,\n                    \"PositiveCases\": 0, \n                    \"NegativeTests\": 0, \n                    \"Deaths\": 0, \n                    \"ICU\": 0, \n                },\n                online: \" offline\",\n                aggr_data: {\n                },\n                \"apiday\"              : [],\n                \"apicase\"             : []\n            }\n        }\n        componentDidMount(){\n            const events = new EventSource(API.baseURL + API.updates); \n            events.addEventListener(\"UpdateSummary\" , (e) => {\n                const cases = TextUtilities.processUpdate(e.data,this.state.cases);\n                this.processCases(cases);\n            });\n            events.onerror = (e) => {\n                console.log(\"Lost connection to host\")\n                events.close();\n            }\n            this.processCases()\n        }\n        processCases(cases){\n            let online = \"\";\n            const last_update = localStorage.getItem(\"last_update\")\n            if (last_update){\n                online = \": data factual as of \"+ last_update;\n            }else{\n                online = \": last update unknown\"\n            }\n            if (!cases){                \n                cases = localStorage.getItem(\"UpdateSummary\")\n            }\n            \n            const p = JSON.parse(cases)\n            if(p && p.length){\n                \n                const data = p[0]\n                const text_data = this.state.text_data\n                const keys = Object.keys(text_data);\n                for(let i = 0; i < keys.length; ++i){\n                    text_data[keys[i]] = data[keys[i]] + \" \" + Utils.TextUtils.getLocalCaption(\"_\" + keys[i]) ;\n                }\n                const update = TextUtilities.getLocalCaption(\"_data_actual_as_of_today\") + \": \" + data[\"today\"];\n                localStorage.setItem(\"UpdateSummary\", cases) \n                localStorage.setItem(\"last_update\", Utils.DateUtils.getLocalDate())\n                online = \": data factual as of \"+ Utils.DateUtils.getLocalDate();\n                this.setState({cases, data, update, text_data, online});\n            }   \n        }\n        render () {\n            return (\n                <div className=\"\">            \n                    <div className=\"container-fluid mt-5\">\n                        <div className=\"row\">\n                            <div className=\"col-12 h3\">\n                                {Utils.TextUtils.getLocalCaption(\"_home_lead\")}\n\n                                {this.state.online}\n                            </div>\n                            <div className=\"col-12 col-md-6 col-lg-8\">\n                                <div className=\"col-12 px-0\">\n                                    <BarChart data=\"CasesProvince\" caption={TextUtilities.getLocalCaption(\"_provincial_cases\")}/>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-6\">\n                                        <BarChart data=\"sexUpdate\" caption={TextUtilities.getLocalCaption(\"_gender_cases\")} />\n                                    </div>\n                                    <div className=\"col-6\">\n                                        <BarChart data=\"transmissionUpdate\" caption={TextUtilities.getLocalCaption(\"_transmision_cases\")}/>\n                                    </div>\n                                </div>                                \n                            </div>\n                            <div className=\"col-12 col-md-6 col-lg-4\">\n                                <div className=\"col-12 pt-5\">\n                                    <ZimbabweMapCard />\n                                </div>\n                                <InfoCard className=\"border border-2x border-primary my-3 p-3\" title={this.state.text_data[\"TotalTests\"]} >\n                                    <div className=\"text-success\"> \n                                        {this.state.text_data[\"NegativeTests\"]}\n                                    </div>\n                                    <div className=\"text-danger\">\n                                        {this.state.text_data[\"PositiveCases\"]}\n                                    </div>                                    \n                                </InfoCard>\n                                <InfoCard className=\"border border-2x border-primary my-3 p-3\" title={this.state.text_data[\"Deaths\"]}>\n                                    <div className=\"text-danger\">\n                                        {this.state.text_data[\"PositiveCases\"]}\n                                    </div>    \n                                </InfoCard>\n                                <InfoCard className=\"border border-2x border-primary my-3 p-3\" title={this.state.text_data[\"ICU\"]} />\n                                <div className=\"my-3\">\n                                    <em>{this.state.update}</em>\n                                </div>\n                            </div>\n                            <div className=\"col-12\">\n                                {Utils.TextUtils.getLocalCaption(\"_home_description\")}\n                            </div>\n                        </div>\n                    </div>\n                </div>      \n            ); \n        }\n    }\n)\n  \n  export default Home;","import React from 'react';\nimport Contacts from \"../../Configs/contacts.json\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faWhatsapp, faTelegram, faTwitter, faFacebook } from '@fortawesome/free-brands-svg-icons'\n\nconst icons = {\n    \"whatsapp\" : {\n        icon : faWhatsapp,\n        color : \"text-success\"\n    },\n    \"twitter\" : {\n        icon : faTwitter,\n        color : \"text-primary\"\n    },\n    \"facebook\" : {\n        icon : faFacebook,\n        color : \"text-primary\"\n    }\n}\nlet formatContacts = () => {\n    const obj_keys = Object.keys(Contacts);\n    const contacts = []\n    for (let i = 0; i < obj_keys.length; ++i ){\n        const k = obj_keys[i]\n        if (icons[k]){\n            contacts.push(<a key={k} \n                href={Contacts[k]} \n                className=\"h5 col-12 py-0\" >\n                    <FontAwesomeIcon \n                    icon={icons[obj_keys[i]].icon} \n                    className={icons[obj_keys[i]].color}/>\n            </a>);\n        }\n    }\n    return contacts\n}\n\nconst ContactsCard = (props) => {\n    return (\n        <div className={props.className} >\n            <div className=\"row\">\n                <div className=\"col-12\"> \n                    {formatContacts()}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ContactsCard;","import React from 'react';\nimport Utils from \"../../utilities\"\nimport Contacts from \"../../Components/card/contacts\"\n\nconst NavBar = (props) => {\n  return (\n    <div>\n      <nav className={\"navbar navbar-white border-bottom border-primary \" + props.className} >\n        <Contacts />\n        <div className=\"\">\n            <img className=\"img-fluid\" width=\"40px\" src=\"images/logo.png\" alt=\"logo\"/>\n            {Utils.TextUtils.getLocalCaption(\"_org\")}\n        </div>\n        <div className=\"text-center nav-item\">\n          {Utils.DateUtils.getLocalDate()}\n          <button className=\"add-button\">Add to home screen</button>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from 'react'; \nimport HomePage from \"./Pages\";\nimport SectionLinks from \"./Configs/Routes/public.json\"\nimport NavBar from \"./Components/navbar\";\n\nimport './Css/bootstrap.css';\nimport './Css/App.css';\n\n\n\nfunction App() {\n    return (\n      <>\n        <NavBar navs={SectionLinks} className=\"mb-5\" />\n        <HomePage/>\n      </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './Css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}